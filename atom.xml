<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Forgo7ten&#39;blog</title>
  
  <subtitle>  By:Forgo7ten</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://forgo7ten.github.io/"/>
  <updated>2020-12-11T16:03:00.000Z</updated>
  <id>https://forgo7ten.github.io/</id>
  
  <author>
    <name>Forgo7ten</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VS Code 自用插件记录</title>
    <link href="https://forgo7ten.github.io/2020/12/12/2020121201/"/>
    <id>https://forgo7ten.github.io/2020/12/12/2020121201/</id>
    <published>2020-12-11T16:03:00.000Z</published>
    <updated>2020-12-11T16:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><table><thead><tr><th align="center">功能</th><th align="center">插件名称</th></tr></thead><tbody><tr><td align="center">VS code 汉化</td><td align="center">Chinese (Simplified) Language Pack</td></tr><tr><td align="center">显示文件大小</td><td align="center">filesize</td></tr><tr><td align="center">彩色多重括号</td><td align="center">Bracket Pair Colorizer 2</td></tr><tr><td align="center">Tab跳出括号</td><td align="center">TabOut</td></tr><tr><td align="center">路径补全</td><td align="center">Path Intellisense</td></tr><tr><td align="center">代码运行器</td><td align="center">Code Runne</td></tr><tr><td align="center">好看文件图标</td><td align="center">vscode-icons</td></tr><tr><td align="center">Markdown插件</td><td align="center">Markdown Preview Enhanced</td></tr><tr><td align="center">自动统计todo注释</td><td align="center">Todo Tree</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><h3 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML/CSS"></a>HTML/CSS</h3><table><thead><tr><th align="center">功能</th><th align="center">插件名称</th></tr></thead><tbody><tr><td align="center">自动闭合HTML/CSS标签</td><td align="center">Auto Close Tag</td></tr><tr><td align="center">自动重命名成对的标签</td><td align="center">Auto Rename Tag</td></tr><tr><td align="center">智能提示CSS类名以及id</td><td align="center">HTML CSS Support</td></tr><tr><td align="center">智能提示HTML标签，以及标签含义</td><td align="center">HTML Snippets</td></tr><tr><td align="center">在浏览器快速打开html文件</td><td align="center">open in browser</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="Java-script"><a href="#Java-script" class="headerlink" title="Java script"></a>Java script</h3><table><thead><tr><th align="center">功能</th><th align="center">插件名称</th></tr></thead><tbody><tr><td align="center">代码片段插件</td><td align="center">JavaScript (ES6) code snippets</td></tr><tr><td align="center">代码格式化</td><td align="center">Beautify</td></tr><tr><td align="center">浏览器调试</td><td align="center">Debugger for Chrome</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="Auto-js"><a href="#Auto-js" class="headerlink" title="Auto.js"></a>Auto.js</h4><p>Auto.js-VSCodeExt</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><table><thead><tr><th align="center">功能</th><th align="center">插件名称</th></tr></thead><tbody><tr><td align="center">python环境必备</td><td align="center">Python</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通用&quot;&gt;&lt;a href=&quot;#通用&quot; class=&quot;headerlink&quot; title=&quot;通用&quot;&gt;&lt;/a&gt;通用&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;功能&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;插件名称&lt;/
      
    
    </summary>
    
    
    
      <category term="工具/python库使用" scheme="https://Forgo7ten.github.io/tags/%E5%B7%A5%E5%85%B7-python%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>reverse加密算法：RSA|SM4|RC4|MD5|AES|Tea</title>
    <link href="https://forgo7ten.github.io/2020/02/06/2020020601/"/>
    <id>https://forgo7ten.github.io/2020/02/06/2020020601/</id>
    <published>2020-02-06T15:03:00.000Z</published>
    <updated>2020-02-06T15:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h1><h2 id="数学基础知识"><a href="#数学基础知识" class="headerlink" title="数学基础知识"></a>数学基础知识</h2><h3 id="互质关系"><a href="#互质关系" class="headerlink" title="互质关系"></a>互质关系</h3><p>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是<em>互质关系</em></p><ol><li>任意两个质数构成互质关系</li><li>一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系</li><li>1和任意一个自然数是都是互质关系</li><li>p是大于1的整数，则p和p-1构成互质关系</li><li>p是大于1的奇数，则p和p-2构成互质关系</li></ol><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>在小于等于n的正整数之中，能与n构成互质关系的数的个数<br>计算这个值的方法叫做欧拉函数，以φ(n)表示</p><ol><li><p>如果n=1，则 φ(1) = 1 。因为1与任何数（包括自身）都构成互质关系</p></li><li><p>如果n是质数，则 φ(n)=n-1 。因为质数与小于它的每一个数，都构成互质关系</p></li><li><p>如果n是质数的某一个次方，即 n = p^k (p为质数，k为大于等于1的整数)</p><p>φ(p^k^) = p^k^ - p^k-1^</p></li><li><p>如果n可以分解成两个互质的整数之积，即<code>n = p1 × p2</code></p><p>则<code>φ(n) = φ(p1 × p2) = φ(p1) × φ(p2)</code></p></li></ol><h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>如果两个正整数a和n互质，则n的欧拉函数 φ(n) 可以让下面的等式成立：<br>a^φ(n)^≡1(mod n)</p><p>费马小定理：<br>假设正整数a与质数p互质，因为质数p的φ(p)等于p-1，则欧拉定理可以写成<br>a^p-1^≡1(mod p)</p><h3 id="模反元素"><a href="#模反元素" class="headerlink" title="模反元素"></a>模反元素</h3><p>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1。<br>ab≡1(mod n)<br>这时候b就叫做a的”模反元素”</p><h2 id="RSA算法基本概念"><a href="#RSA算法基本概念" class="headerlink" title="RSA算法基本概念"></a>RSA算法基本概念</h2><ol><li><p>RSA加密</p><p>密文 = 明文^E^mod<em>N</em></p><p>公钥 = (E,N)</p></li><li><p>RSA解密</p><p>明文 = 密文^D^mod<em>N</em></p><p>私钥 = (D,N)</p></li></ol><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>公钥</td><td>(E,N)</td></tr><tr><td>私钥</td><td>(D,N)</td></tr><tr><td>密钥对</td><td>(E,D,N)</td></tr><tr><td>加密</td><td>密文 = 明文^E^mod<em>N</em></td></tr><tr><td>解密</td><td>明文 = 密文^D^mod<em>N</em></td></tr></tbody></table><h2 id="生成密钥对过程"><a href="#生成密钥对过程" class="headerlink" title="生成密钥对过程"></a>生成密钥对过程</h2><ol><li><p>随机找两个质数p和q，p和q越大越安全，计算他们的乘积<code>n=p*q</code></p><p>实际算法中p和q的乘积转化为二进制为1024位或2048位，位数越长，算法越难被破解</p></li><li><p>计算n的欧拉函数  <code>L = φ(n)</code></p><p>φ(n)表示在小于等于n的正整数之中，与n构成互质关系的数的个数。</p><p>互质关系：互质是公约数只有1的两个整数。</p><p>φ(n) = φ(p<em>q) = φ(p)\</em>φ(q) = (p-1)*(q-1)</p><blockquote><p>欧拉函数特殊性质：</p><ol><li>若m,n互质，φ(m<em>n) = φ(m)\</em>φ(n)</li><li>若n为质数则，φ(n) = n-1</li></ol></blockquote></li><li><p>求E</p><p>E是随机选取的一个数，满足两个条件：1&lt;E&lt;L；E和L的最大公约数为1</p></li><li><p>求D</p><p>D必须满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt; D &lt; L</span><br><span class="line">E*D mod L &#x3D; 1</span><br></pre></td></tr></table></figure><p>也就是满足乘法逆元E*D≡1(mod L)<br>D为E关于1模L的乘法逆元</p></li></ol><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>求N</td><td>N＝ p＊q ；p,q为质数</td></tr><tr><td>求L</td><td>L =  (p-1)*(q-1)</td></tr><tr><td>求E</td><td>1&lt;E&lt;L,E与L互质</td></tr><tr><td>求D</td><td>1 &lt; D &lt; L，E＊D mod L ＝ 1</td></tr></tbody></table><h2 id="Windows下yafu安装及使用"><a href="#Windows下yafu安装及使用" class="headerlink" title="Windows下yafu安装及使用"></a>Windows下yafu安装及使用</h2><h3 id="安装yafu"><a href="#安装yafu" class="headerlink" title="安装yafu"></a>安装yafu</h3><p>下载网址：<a href="https://sourceforge.net/projects/yafu/">yafu下载</a></p><h3 id="使用yafu"><a href="#使用yafu" class="headerlink" title="使用yafu"></a>使用yafu</h3><ol><li>进入yafu解压目录，打开cmd命令行</li><li>输入<code>yafu-x64</code>（即yafu64位文件名）<br> 命令：<code>factor(n)</code>—— n 为需要分解的大数</li></ol><p>若n位数过长,将n值保存在文本文档里，最后<strong>一定要有换行符</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yafu-x64 &quot;factor(@)&quot; -batchfile test.txt</span><br></pre></td></tr></table></figure><p>其中<code>test.txt</code>为保存需分解的大质数的文本文档</p><h2 id="使用python来进行RSA加密解密"><a href="#使用python来进行RSA加密解密" class="headerlink" title="使用python来进行RSA加密解密"></a>使用python来进行RSA加密解密</h2><p>gmpy2库 安装 请参见 【linux笔记】</p><p>有了N求p、q可使用网址<a href="http://www.factordb.com/">大质数分解</a>  或者使用yafu</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N = <span class="number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span></span><br><span class="line">E = <span class="number">65537</span></span><br><span class="line">p = <span class="number">282164587459512124844245113950593348271</span></span><br><span class="line">q = <span class="number">366669102002966856876605669837014229419</span></span><br><span class="line">L = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">D = <span class="built_in">int</span>(gmpy2.invert(E, L)) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">gmpy2.invert()返回值类型为&lt;class &#x27;mpz&#x27;&gt;</span></span><br><span class="line"><span class="string">invert(x,y)  计算 x 关于1模 y 的乘法逆元</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">enstr = <span class="number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span></span><br><span class="line">destr = gmpy2.powmod(enstr, D, N)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">gmpy2.powmod()返回值类型为&lt;class &#x27;mpz&#x27;&gt;</span></span><br><span class="line"><span class="string">gmpy2.powmod(x,y,z)，计算x^y mod z 的值并返回</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">flag0 = <span class="built_in">hex</span>(destr)[<span class="number">2</span>:]     <span class="comment"># flag0类型为str，存的是十六进制表示的字符串</span></span><br><span class="line">flag1 = <span class="built_in">bytes</span>.fromhex(flag0)  <span class="comment"># 将其从十六进制转换为byte类型(此时已解释成字符)</span></span><br><span class="line">flag = <span class="built_in">str</span>(flag1, <span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 将byte类型转换为str类型</span></span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="SM4算法"><a href="#SM4算法" class="headerlink" title="SM4算法"></a>SM4算法</h1><p>参考链接：<a href="%5Bhttps://neuqzxy.github.io/2017/06/15/%E6%AC%A3%E4%BB%94%E5%B8%A6%E4%BD%A0%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8SM4%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/%5D(https://neuqzxy.github.io/2017/06/15/%E6%AC%A3%E4%BB%94%E5%B8%A6%E4%BD%A0%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8SM4%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/)">欣仔带你零基础入门SM4加密算法</a></p><h2 id="SM4算法简介"><a href="#SM4算法简介" class="headerlink" title="SM4算法简介"></a>SM4算法简介</h2><p>SM4是一个分组密码，明文和密文的长度是128位，秘钥的长度是128位。</p><p>将128位分成以32位为单位</p><h3 id="SM4分步讲解"><a href="#SM4分步讲解" class="headerlink" title="SM4分步讲解"></a>SM4分步讲解</h3><h4 id="S盒处理"><a href="#S盒处理" class="headerlink" title="S盒处理"></a>S盒处理</h4><p>先进行S盒处理，s盒为<strong>特定数据</strong></p><p><img src= "/img/loading.gif" data-lazy-src="2020020601/1.png" alt="image-20200206195951088"></p><p>由于S盒只能处理两位十六进制数，也就是8位，所以处理32位时候采用4个s盒并列来进行加密</p><p><img src= "/img/loading.gif" data-lazy-src="2020020601/2.png" alt="image-20200206203037458"></p><h4 id="L变换"><a href="#L变换" class="headerlink" title="L变换"></a>L变换</h4><p>将S盒输出的32位（例如下图B）作为L变换的输入，</p><p><img src= "/img/loading.gif" data-lazy-src="2020020601/4.png" alt="image-20200206204241175"></p><p><img src= "/img/loading.gif" data-lazy-src="2020020601/3.png" alt="image-20200206203443604"></p><p>也就是L(B)返回<code>B ^ (B&lt;&lt;&lt;2) ^ (B&lt;&lt;&lt;10) ^ (B&lt;&lt;&lt;18) ^  (B&lt;&lt;&lt;24)</code></p><h4 id="轮函数"><a href="#轮函数" class="headerlink" title="轮函数"></a>轮函数</h4><p>X<del>0</del> X<del>1</del> X<del>2</del> X<del>3</del>   为128位的明文分成的四个32位</p><p><img src= "/img/loading.gif" data-lazy-src="2020020601/6.png" alt="轮函数"></p><p><img src= "/img/loading.gif" data-lazy-src="2020020601/5.png" alt="image-20200206212325570"></p><h3 id="SM4加密算法"><a href="#SM4加密算法" class="headerlink" title="SM4加密算法"></a>SM4加密算法</h3><p><img src= "/img/loading.gif" data-lazy-src="2020020601/7.png" alt="image-20200206214523262"></p><p><img src= "/img/loading.gif" data-lazy-src="2020020601/8.png" alt="image-20200206214617744"></p><h3 id="轮秘钥rk生成"><a href="#轮秘钥rk生成" class="headerlink" title="轮秘钥rk生成"></a>轮秘钥rk生成</h3><p><img src= "/img/loading.gif" data-lazy-src="2020020601/9.png" alt="image-20200206221433180"></p><p><img src= "/img/loading.gif" data-lazy-src="2020020601/10.png" alt="image-20200206221532274"></p><h2 id="CTF中SM4算法的特征"><a href="#CTF中SM4算法的特征" class="headerlink" title="CTF中SM4算法的特征"></a>CTF中SM4算法的特征</h2><ol><li><p>S盒固定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> TAO[<span class="number">16</span>][<span class="number">16</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="number">0xd6</span>,<span class="number">0x90</span>,<span class="number">0xe9</span>,<span class="number">0xfe</span>,<span class="number">0xcc</span>,<span class="number">0xe1</span>,<span class="number">0x3d</span>,<span class="number">0xb7</span>,<span class="number">0x16</span>,<span class="number">0xb6</span>,<span class="number">0x14</span>,<span class="number">0xc2</span>,<span class="number">0x28</span>,<span class="number">0xfb</span>,<span class="number">0x2c</span>,<span class="number">0x05</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x2b</span>,<span class="number">0x67</span>,<span class="number">0x9a</span>,<span class="number">0x76</span>,<span class="number">0x2a</span>,<span class="number">0xbe</span>,<span class="number">0x04</span>,<span class="number">0xc3</span>,<span class="number">0xaa</span>,<span class="number">0x44</span>,<span class="number">0x13</span>,<span class="number">0x26</span>,<span class="number">0x49</span>,<span class="number">0x86</span>,<span class="number">0x06</span>,<span class="number">0x99</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x9c</span>,<span class="number">0x42</span>,<span class="number">0x50</span>,<span class="number">0xf4</span>,<span class="number">0x91</span>,<span class="number">0xef</span>,<span class="number">0x98</span>,<span class="number">0x7a</span>,<span class="number">0x33</span>,<span class="number">0x54</span>,<span class="number">0x0b</span>,<span class="number">0x43</span>,<span class="number">0xed</span>,<span class="number">0xcf</span>,<span class="number">0xac</span>,<span class="number">0x62</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xe4</span>,<span class="number">0xb3</span>,<span class="number">0x1c</span>,<span class="number">0xa9</span>,<span class="number">0xc9</span>,<span class="number">0x08</span>,<span class="number">0xe8</span>,<span class="number">0x95</span>,<span class="number">0x80</span>,<span class="number">0xdf</span>,<span class="number">0x94</span>,<span class="number">0xfa</span>,<span class="number">0x75</span>,<span class="number">0x8f</span>,<span class="number">0x3f</span>,<span class="number">0xa6</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x47</span>,<span class="number">0x07</span>,<span class="number">0xa7</span>,<span class="number">0xfc</span>,<span class="number">0xf3</span>,<span class="number">0x73</span>,<span class="number">0x17</span>,<span class="number">0xba</span>,<span class="number">0x83</span>,<span class="number">0x59</span>,<span class="number">0x3c</span>,<span class="number">0x19</span>,<span class="number">0xe6</span>,<span class="number">0x85</span>,<span class="number">0x4f</span>,<span class="number">0xa8</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x68</span>,<span class="number">0x6b</span>,<span class="number">0x81</span>,<span class="number">0xb2</span>,<span class="number">0x71</span>,<span class="number">0x64</span>,<span class="number">0xda</span>,<span class="number">0x8b</span>,<span class="number">0xf8</span>,<span class="number">0xeb</span>,<span class="number">0x0f</span>,<span class="number">0x4b</span>,<span class="number">0x70</span>,<span class="number">0x56</span>,<span class="number">0x9d</span>,<span class="number">0x35</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x1e</span>,<span class="number">0x24</span>,<span class="number">0x0e</span>,<span class="number">0x5e</span>,<span class="number">0x63</span>,<span class="number">0x58</span>,<span class="number">0xd1</span>,<span class="number">0xa2</span>,<span class="number">0x25</span>,<span class="number">0x22</span>,<span class="number">0x7c</span>,<span class="number">0x3b</span>,<span class="number">0x01</span>,<span class="number">0x21</span>,<span class="number">0x78</span>,<span class="number">0x87</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xd4</span>,<span class="number">0x00</span>,<span class="number">0x46</span>,<span class="number">0x57</span>,<span class="number">0x9f</span>,<span class="number">0xd3</span>,<span class="number">0x27</span>,<span class="number">0x52</span>,<span class="number">0x4c</span>,<span class="number">0x36</span>,<span class="number">0x02</span>,<span class="number">0xe7</span>,<span class="number">0xa0</span>,<span class="number">0xc4</span>,<span class="number">0xc8</span>,<span class="number">0x9e</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xea</span>,<span class="number">0xbf</span>,<span class="number">0x8a</span>,<span class="number">0xd2</span>,<span class="number">0x40</span>,<span class="number">0xc7</span>,<span class="number">0x38</span>,<span class="number">0xb5</span>,<span class="number">0xa3</span>,<span class="number">0xf7</span>,<span class="number">0xf2</span>,<span class="number">0xce</span>,<span class="number">0xf9</span>,<span class="number">0x61</span>,<span class="number">0x15</span>,<span class="number">0xa1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xe0</span>,<span class="number">0xae</span>,<span class="number">0x5d</span>,<span class="number">0xa4</span>,<span class="number">0x9b</span>,<span class="number">0x34</span>,<span class="number">0x1a</span>,<span class="number">0x55</span>,<span class="number">0xad</span>,<span class="number">0x93</span>,<span class="number">0x32</span>,<span class="number">0x30</span>,<span class="number">0xf5</span>,<span class="number">0x8c</span>,<span class="number">0xb1</span>,<span class="number">0xe3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x1d</span>,<span class="number">0xf6</span>,<span class="number">0xe2</span>,<span class="number">0x2e</span>,<span class="number">0x82</span>,<span class="number">0x66</span>,<span class="number">0xca</span>,<span class="number">0x60</span>,<span class="number">0xc0</span>,<span class="number">0x29</span>,<span class="number">0x23</span>,<span class="number">0xab</span>,<span class="number">0x0d</span>,<span class="number">0x53</span>,<span class="number">0x4e</span>,<span class="number">0x6f</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xd5</span>,<span class="number">0xdb</span>,<span class="number">0x37</span>,<span class="number">0x45</span>,<span class="number">0xde</span>,<span class="number">0xfd</span>,<span class="number">0x8e</span>,<span class="number">0x2f</span>,<span class="number">0x03</span>,<span class="number">0xff</span>,<span class="number">0x6a</span>,<span class="number">0x72</span>,<span class="number">0x6d</span>,<span class="number">0x6c</span>,<span class="number">0x5b</span>,<span class="number">0x51</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x8d</span>,<span class="number">0x1b</span>,<span class="number">0xaf</span>,<span class="number">0x92</span>,<span class="number">0xbb</span>,<span class="number">0xdd</span>,<span class="number">0xbc</span>,<span class="number">0x7f</span>,<span class="number">0x11</span>,<span class="number">0xd9</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x1f</span>,<span class="number">0x10</span>,<span class="number">0x5a</span>,<span class="number">0xd8</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x0a</span>,<span class="number">0xc1</span>,<span class="number">0x31</span>,<span class="number">0x88</span>,<span class="number">0xa5</span>,<span class="number">0xcd</span>,<span class="number">0x7b</span>,<span class="number">0xbd</span>,<span class="number">0x2d</span>,<span class="number">0x74</span>,<span class="number">0xd0</span>,<span class="number">0x12</span>,<span class="number">0xb8</span>,<span class="number">0xe5</span>,<span class="number">0xb4</span>,<span class="number">0xb0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x89</span>,<span class="number">0x69</span>,<span class="number">0x97</span>,<span class="number">0x4a</span>,<span class="number">0x0c</span>,<span class="number">0x96</span>,<span class="number">0x77</span>,<span class="number">0x7e</span>,<span class="number">0x65</span>,<span class="number">0xb9</span>,<span class="number">0xf1</span>,<span class="number">0x09</span>,<span class="number">0xc5</span>,<span class="number">0x6e</span>,<span class="number">0xc6</span>,<span class="number">0x84</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x18</span>,<span class="number">0xf0</span>,<span class="number">0x7d</span>,<span class="number">0xec</span>,<span class="number">0x3a</span>,<span class="number">0xdc</span>,<span class="number">0x4d</span>,<span class="number">0x20</span>,<span class="number">0x79</span>,<span class="number">0xee</span>,<span class="number">0x5f</span>,<span class="number">0x3e</span>,<span class="number">0xd7</span>,<span class="number">0xcb</span>,<span class="number">0x39</span>,<span class="number">0x48</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>系统参数 FK 固定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> FK[<span class="number">4</span>] = &#123;<span class="number">0xa3b1bac6</span>, <span class="number">0x56aa3350</span>, <span class="number">0x677d9197</span>, <span class="number">0xb27022dc</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>固定参数 CK 固定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> CK[<span class="number">32</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x00070e15</span>, <span class="number">0x1c232a31</span>, <span class="number">0x383f464d</span>, <span class="number">0x545b6269</span>,</span><br><span class="line">    <span class="number">0x70777e85</span>, <span class="number">0x8c939aa1</span>, <span class="number">0xa8afb6bd</span>, <span class="number">0xc4cbd2d9</span>,</span><br><span class="line">    <span class="number">0xe0e7eef5</span>, <span class="number">0xfc030a11</span>, <span class="number">0x181f262d</span>, <span class="number">0x343b4249</span>,</span><br><span class="line">    <span class="number">0x50575e65</span>, <span class="number">0x6c737a81</span>, <span class="number">0x888f969d</span>, <span class="number">0xa4abb2b9</span>,</span><br><span class="line">    <span class="number">0xc0c7ced5</span>, <span class="number">0xdce3eaf1</span>, <span class="number">0xf8ff060d</span>, <span class="number">0x141b2229</span>,</span><br><span class="line">    <span class="number">0x30373e45</span>, <span class="number">0x4c535a61</span>, <span class="number">0x686f767d</span>, <span class="number">0x848b9299</span>,</span><br><span class="line">    <span class="number">0xa0a7aeb5</span>, <span class="number">0xbcc3cad1</span>, <span class="number">0xd8dfe6ed</span>, <span class="number">0xf4fb0209</span>,</span><br><span class="line">    <span class="number">0x10171e25</span>, <span class="number">0x2c333a41</span>, <span class="number">0x484f565d</span>, <span class="number">0x646b7279</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用python库对SM4算法进行解密"><a href="#使用python库对SM4算法进行解密" class="headerlink" title="使用python库对SM4算法进行解密"></a>使用python库对SM4算法进行解密</h2><p>pysm4库 安装 请参见 【linux笔记】</p><p>标准128位加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from pysm4 import encrypt, decrypt</span><br><span class="line"># 明文</span><br><span class="line">&gt;&gt;&gt; clear_num &#x3D; 0x0123456789abcdeffedcba9876543210</span><br><span class="line"># 密钥</span><br><span class="line">&gt;&gt;&gt; mk &#x3D; 0x0123456789abcdeffedcba9876543210</span><br><span class="line"># 加密</span><br><span class="line">&gt;&gt;&gt; cipher_num &#x3D; encrypt(clear_num, mk)</span><br><span class="line">&gt;&gt;&gt; hex(cipher_num)[2:].replace(&#39;L&#39;, &#39;&#39;)</span><br><span class="line">&#39;681edf34d206965e86b3e94f536e4246&#39;</span><br><span class="line"># 解密</span><br><span class="line">&gt;&gt;&gt; clear_num &#x3D;&#x3D; decrypt(cipher_num, mk)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>特殊情况参见<a href="https://github.com/yang3yen/pysm4">pysm4安装文档</a></p><p><a href="https://www.jianshu.com/p/58cc30625f16">此链接仅作保存|没有验证过</a></p><h1 id="RC4算法"><a href="#RC4算法" class="headerlink" title="RC4算法"></a>RC4算法</h1><h2 id="RC4算法简单讲述"><a href="#RC4算法简单讲述" class="headerlink" title="RC4算法简单讲述"></a>RC4算法简单讲述</h2><ol><li>生成S盒</li></ol><p>开始时,S中元素的值被置为按升序从0到255,即S[0]=0,S[1]=1,…,S[255]=255。同时建立一个临时矢量T(长度与S相同)。如果密钥K的长度为256字节,则将K赋给T(K的长度为可能小于S的长度)。否则,若密钥长度为keylen字节,则将K的值赋给T的前keylen个元素,并循环重复用K的值赋给T剩下的元素,直到T的所有元素都被赋值。</p><ol start="2"><li>打乱S盒</li></ol><p>然后用T产生S的初始置换.从S[0]到S [255],对每个S[i],根据由T[i]确定的方案,将S[i]置换为S中的另一字节。</p><p>秘钥调度算法(KSA)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">char</span> *key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span> <span class="comment">//初始化函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++) &#123;</span><br><span class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>矢量S一旦完成初始化,输入密钥就不再被使用。密钥流的生成是从S[0]到S[255],对每个s[i],根据当前S的值,将S[i]与S中的另一字节置换。当S[255]完成置换后,操作继续重复,最后进行异或运算</li></ol><p>伪随机生成算法(PRGA)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">char</span> *Data, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span> <span class="comment">//加解密</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++) &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k] ^= s[t];</span><br><span class="line">     &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="RC4算法解密脚本（c语言）"><a href="#RC4算法解密脚本（c语言）" class="headerlink" title="RC4算法解密脚本（c语言）"></a>RC4算法解密脚本（c语言）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">void rc4_init(unsigned char* s, unsigned char* key, unsigned long Len_k) &#x2F;&#x2F;初始化函数</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0, j &#x3D; 0;</span><br><span class="line">    char k[256] &#x3D; &#123; 0 &#125;;</span><br><span class="line">    unsigned char tmp &#x3D; 0;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 256; i++) &#123;</span><br><span class="line">        s[i] &#x3D; i;</span><br><span class="line">        k[i] &#x3D; key[i % Len_k];</span><br><span class="line">    &#125;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 256; i++) &#123;</span><br><span class="line">        j &#x3D; (j + s[i] + k[i]) % 256;</span><br><span class="line">        tmp &#x3D; s[i];</span><br><span class="line">        s[i] &#x3D; s[j]; &#x2F;&#x2F;交换s[i]和s[j]</span><br><span class="line">        s[j] &#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">RC4加解密函数</span><br><span class="line">unsigned char* Data     加解密的数据</span><br><span class="line">unsigned long Len_D     加解密数据的长度</span><br><span class="line">unsigned char* key      密钥</span><br><span class="line">unsigned long Len_k     密钥长度</span><br><span class="line">*&#x2F;</span><br><span class="line">void rc4_crypt(unsigned char* Data, unsigned long Len_D, unsigned char* key, unsigned long Len_k) &#x2F;&#x2F;加解密</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char s[256];</span><br><span class="line">    rc4_init(s, key, Len_k);</span><br><span class="line">    int i &#x3D; 0, j &#x3D; 0, t &#x3D; 0;</span><br><span class="line">    unsigned long k &#x3D; 0;</span><br><span class="line">    unsigned char tmp;</span><br><span class="line">    for (k &#x3D; 0; k &lt; Len_D; k++) &#123;</span><br><span class="line">        i &#x3D; (i + 1) % 256;</span><br><span class="line">        j &#x3D; (j + s[i]) % 256;</span><br><span class="line">        tmp &#x3D; s[i];</span><br><span class="line">        s[i] &#x3D; s[j]; &#x2F;&#x2F;交换s[x]和s[y]</span><br><span class="line">        s[j] &#x3D; tmp;</span><br><span class="line">        t &#x3D; (s[i] + s[j]) % 256;</span><br><span class="line">        Data[k] ^&#x3D; s[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h1><h2 id="MD5基本描述"><a href="#MD5基本描述" class="headerlink" title="MD5基本描述"></a>MD5基本描述</h2><p>MD5的输入输出如下</p><ul><li>输入：任意长的消息，512比特长的分组。</li><li>输出：160比特的消息摘要。</li></ul><p>有时候获得到的md5是16位的，其实那16位是32位md5的长度，是从32位md5值来的。是将32位md5去掉前八位，去掉后八位得到的。</p><h2 id="MD5特征-MD5函数的初始化IV"><a href="#MD5特征-MD5函数的初始化IV" class="headerlink" title="MD5特征(MD5函数的初始化IV)"></a>MD5特征(MD5函数的初始化IV)</h2><p>一般来说，可以通过函数的初始化来判断是不是MD5函数。一般来说，如果一个函数有如下四个初始化的变量，可以猜测该函数为MD5函数，因为这是MD5函数的初始化IV。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">int</span> h0 := <span class="number">0x67452301</span></span><br><span class="line">var <span class="keyword">int</span> h1 := <span class="number">0xEFCDAB89</span></span><br><span class="line">var <span class="keyword">int</span> h2 := <span class="number">0x98BADCFE</span></span><br><span class="line">var <span class="keyword">int</span> h3 := <span class="number">0x10325476</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> k[]=&#123;</span><br><span class="line">        <span class="number">0xd76aa478</span>,<span class="number">0xe8c7b756</span>,<span class="number">0x242070db</span>,<span class="number">0xc1bdceee</span>,</span><br><span class="line">        <span class="number">0xf57c0faf</span>,<span class="number">0x4787c62a</span>,<span class="number">0xa8304613</span>,<span class="number">0xfd469501</span>,<span class="number">0x698098d8</span>,</span><br><span class="line">        <span class="number">0x8b44f7af</span>,<span class="number">0xffff5bb1</span>,<span class="number">0x895cd7be</span>,<span class="number">0x6b901122</span>,<span class="number">0xfd987193</span>,</span><br><span class="line">        <span class="number">0xa679438e</span>,<span class="number">0x49b40821</span>,<span class="number">0xf61e2562</span>,<span class="number">0xc040b340</span>,<span class="number">0x265e5a51</span>,</span><br><span class="line">        <span class="number">0xe9b6c7aa</span>,<span class="number">0xd62f105d</span>,<span class="number">0x02441453</span>,<span class="number">0xd8a1e681</span>,<span class="number">0xe7d3fbc8</span>,</span><br><span class="line">        <span class="number">0x21e1cde6</span>,<span class="number">0xc33707d6</span>,<span class="number">0xf4d50d87</span>,<span class="number">0x455a14ed</span>,<span class="number">0xa9e3e905</span>,</span><br><span class="line">        <span class="number">0xfcefa3f8</span>,<span class="number">0x676f02d9</span>,<span class="number">0x8d2a4c8a</span>,<span class="number">0xfffa3942</span>,<span class="number">0x8771f681</span>,</span><br><span class="line">        <span class="number">0x6d9d6122</span>,<span class="number">0xfde5380c</span>,<span class="number">0xa4beea44</span>,<span class="number">0x4bdecfa9</span>,<span class="number">0xf6bb4b60</span>,</span><br><span class="line">        <span class="number">0xbebfbc70</span>,<span class="number">0x289b7ec6</span>,<span class="number">0xeaa127fa</span>,<span class="number">0xd4ef3085</span>,<span class="number">0x04881d05</span>,</span><br><span class="line">        <span class="number">0xd9d4d039</span>,<span class="number">0xe6db99e5</span>,<span class="number">0x1fa27cf8</span>,<span class="number">0xc4ac5665</span>,<span class="number">0xf4292244</span>,</span><br><span class="line">        <span class="number">0x432aff97</span>,<span class="number">0xab9423a7</span>,<span class="number">0xfc93a039</span>,<span class="number">0x655b59c3</span>,<span class="number">0x8f0ccc92</span>,</span><br><span class="line">        <span class="number">0xffeff47d</span>,<span class="number">0x85845dd1</span>,<span class="number">0x6fa87e4f</span>,<span class="number">0xfe2ce6e0</span>,<span class="number">0xa3014314</span>,</span><br><span class="line">        <span class="number">0x4e0811a1</span>,<span class="number">0xf7537e82</span>,<span class="number">0xbd3af235</span>,<span class="number">0x2ad7d2bb</span>,<span class="number">0xeb86d391</span>&#125;;</span><br><span class="line"><span class="comment">//向左位移数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> s[]=&#123;<span class="number">7</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">7</span>,</span><br><span class="line">        <span class="number">12</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">20</span>,</span><br><span class="line">        <span class="number">4</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">6</span>,<span class="number">10</span>,</span><br><span class="line">        <span class="number">15</span>,<span class="number">21</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> str16[]=<span class="string">&quot;0123456789abcdef&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="查询MD5的网站"><a href="#查询MD5的网站" class="headerlink" title="查询MD5的网站"></a>查询MD5的网站</h2><ul><li><a href="http://www.cmd5.com/">http://www.cmd5.com/</a></li><li><a href="http://www.ttmd5.com/">http://www.ttmd5.com/</a></li><li><a href="http://pmd5.com/">http://pmd5.com/</a></li></ul><h1 id="tea系列"><a href="#tea系列" class="headerlink" title="tea系列"></a>tea系列</h1><h2 id="tea系列加解密脚本（c语言）"><a href="#tea系列加解密脚本（c语言）" class="headerlink" title="tea系列加解密脚本（c语言）"></a>tea系列加解密脚本（c语言）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tea_DELTA 0x9e3779b9</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tea加密函数</span></span><br><span class="line"><span class="comment">32轮加密，请根据需要更改</span></span><br><span class="line"><span class="comment">uint32_t* origin   为要加密的数据是两个32位无符号整数</span></span><br><span class="line"><span class="comment">uint32_t* key      为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_encode</span><span class="params">(<span class="keyword">uint32_t</span>* origin, <span class="keyword">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = origin[<span class="number">0</span>], v1 = origin[<span class="number">1</span>], sum = <span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = key[<span class="number">0</span>], k1 = key[<span class="number">1</span>], k2 = key[<span class="number">2</span>], k3 = key[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    origin[<span class="number">0</span>] = v0; origin[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tea解密函数</span></span><br><span class="line"><span class="comment">32轮解密，请根据需要更改</span></span><br><span class="line"><span class="comment">uint32_t* origin   为要加密的数据是两个32位无符号整数</span></span><br><span class="line"><span class="comment">uint32_t* key      为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_decode</span><span class="params">(<span class="keyword">uint32_t</span>* origin, <span class="keyword">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = origin[<span class="number">0</span>], v1 = origin[<span class="number">1</span>], i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9e3779b9</span>,sum = delta &lt;&lt; <span class="number">5</span>; <span class="comment">//32轮运算，所以是2的5次方；16轮运算，所以是2的4次方；8轮运算，所以是2的3次方/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = key[<span class="number">0</span>], k1 = key[<span class="number">1</span>], k2 = key[<span class="number">2</span>], k3 = key[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">&#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    origin[<span class="number">0</span>] = v0; origin[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">xtea加密函数</span></span><br><span class="line"><span class="comment">num_rounds         加密轮数</span></span><br><span class="line"><span class="comment">uint32_t* origin   为要加密的数据是两个32位无符号整数</span></span><br><span class="line"><span class="comment">uint32_t* k        为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xtea_encode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">uint32_t</span> origin[<span class="number">2</span>], <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = origin[<span class="number">0</span>], v1 = origin[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    origin[<span class="number">0</span>] = v0; origin[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">xtea解密函数</span></span><br><span class="line"><span class="comment">num_rounds         加密轮数</span></span><br><span class="line"><span class="comment">uint32_t* origin   为要加密的数据是两个32位无符号整数</span></span><br><span class="line"><span class="comment">uint32_t* k        为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xtea_decode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">uint32_t</span> origin[<span class="number">2</span>], <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = origin[<span class="number">0</span>], v1 = origin[<span class="number">1</span>], delta = <span class="number">0x9E3779B9</span>, sum = delta * num_rounds;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">    origin[<span class="number">0</span>] = v0; origin[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// xxtea加密解密</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span><span class="comment">//例子</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">2</span>] = &#123; <span class="number">1</span>,<span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> <span class="keyword">const</span> k[<span class="number">4</span>] = &#123; <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">2</span>; <span class="comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密</span></span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数</span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密前原始数据：%u %u\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    xxtea(v, n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    xxtea(v, -n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%u %u\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xxtea_MX (((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">origin    为要加密的数据是两个32位无符号整数（若加密字符串先转换为16进制整数）</span></span><br><span class="line"><span class="comment">n         的绝对值表示v的长度(即有几个32位整数)，取正表示加密，取负表示解密</span></span><br><span class="line"><span class="comment">key       为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea</span><span class="params">(<span class="keyword">uint32_t</span>* origin, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="keyword">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = origin[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += tea_DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = origin[p + <span class="number">1</span>];</span><br><span class="line">                z = origin[p] += xxtea_MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = origin[<span class="number">0</span>];</span><br><span class="line">            z = origin[n - <span class="number">1</span>] += xxtea_MX;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = rounds * tea_DELTA;</span><br><span class="line">        y = origin[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = origin[p - <span class="number">1</span>];</span><br><span class="line">                y = origin[p] -= xxtea_MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = origin[n - <span class="number">1</span>];</span><br><span class="line">            y = origin[<span class="number">0</span>] -= xxtea_MX;</span><br><span class="line">            sum -= tea_DELTA;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="base64加解密"><a href="#base64加解密" class="headerlink" title="base64加解密"></a>base64加解密</h1><p>更多讲解请参见 【Base16,Base32,Base64编码详细学习】</p><h2 id="base64加解密脚本（c语言）"><a href="#base64加解密脚本（c语言）" class="headerlink" title="base64加解密脚本（c语言）"></a>base64加解密脚本（c语言）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">base64加密</span></span><br><span class="line"><span class="comment">const unsigned char* src    需要加密的数组</span></span><br><span class="line"><span class="comment">unsigned char* dst          加密之后存储的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">base64_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* src, <span class="keyword">unsigned</span> <span class="keyword">char</span>* dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span>*)src);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> base64char[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        *dst++ = base64char[src[<span class="number">0</span>] &gt;&gt; <span class="number">2</span> &amp; <span class="number">0x3f</span>];</span><br><span class="line">        *dst++ = base64char[(src[<span class="number">0</span>] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span> | src[<span class="number">1</span>] &gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">        *dst++ = base64char[(src[<span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">2</span> | src[<span class="number">2</span>] &gt;&gt; <span class="number">6</span> &amp; <span class="number">0x3</span>];</span><br><span class="line">        *dst++ = base64char[src[<span class="number">2</span>] &amp; <span class="number">0x3f</span>];</span><br><span class="line">        len -= <span class="number">3</span>;</span><br><span class="line">        src += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len) &#123;</span><br><span class="line">        *dst++ = base64char[src[<span class="number">0</span>] &gt;&gt; <span class="number">2</span> &amp; <span class="number">0x3f</span>];</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            *dst++ = base64char[((src[<span class="number">0</span>] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>) | ((src[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xf</span>)];</span><br><span class="line">            *dst++ = base64char[(src[<span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            *dst++ = base64char[(src[<span class="number">0</span>] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>];</span><br><span class="line">            *dst++ = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *dst++ = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *dst = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">base64解密</span></span><br><span class="line"><span class="comment">const unsigned char* src    需要解密的字符</span></span><br><span class="line"><span class="comment">unsigned char* dst          解密之后存储的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">base64_decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* src, <span class="keyword">unsigned</span> <span class="keyword">char</span>* dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> base64char[] = &#123;</span><br><span class="line">            <span class="number">-1</span> , <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line">            <span class="number">-1</span> , <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line">            <span class="number">-1</span> , <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">62</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line">            <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line">            <span class="number">-1</span> ,  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>,</span><br><span class="line">            <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">63</span>,</span><br><span class="line">            <span class="number">-1</span> , <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>,</span><br><span class="line">            <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span>*)src);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//unexpected characters</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (src[i] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">            len = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">4</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        *dst++ = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(base64char[src[<span class="number">0</span>]] &lt;&lt; <span class="number">2</span>) | (base64char[src[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span> &amp; <span class="number">0x3</span>);</span><br><span class="line">        *dst++ = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(base64char[src[<span class="number">1</span>]] &lt;&lt; <span class="number">4</span>) | (base64char[src[<span class="number">2</span>]] &gt;&gt; <span class="number">2</span> &amp; <span class="number">0xf</span>);</span><br><span class="line">        *dst++ = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(base64char[src[<span class="number">2</span>]] &lt;&lt; <span class="number">6</span>) | (base64char[src[<span class="number">3</span>]]);</span><br><span class="line"></span><br><span class="line">        src += <span class="number">4</span>;</span><br><span class="line">        len -= <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            *dst++ = (base64char[src[<span class="number">0</span>]] &lt;&lt; <span class="number">2</span>) | (base64char[src[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span> &amp; <span class="number">0x3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            *dst++ = (base64char[src[<span class="number">1</span>]] &lt;&lt; <span class="number">4</span>) | (base64char[src[<span class="number">2</span>]] &gt;&gt; <span class="number">2</span> &amp; <span class="number">0xf</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    *dst = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">base64自定义字符表加密</span></span><br><span class="line"><span class="comment">char* src       存放待加密字符串的数组</span></span><br><span class="line"><span class="comment">char* dst       存放加密后字符串的数组</span></span><br><span class="line"><span class="comment">char* mytable   自定义字符表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">base64_myen</span><span class="params">(<span class="keyword">char</span>* src, <span class="keyword">char</span>*dst, <span class="keyword">char</span>* mytable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    base64_encode((<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>*)src,(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)dst);</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">char</span> base64_table[<span class="number">65</span>] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> len_s = <span class="built_in">strlen</span>(dst);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len_s; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">65</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dst[i] == base64_table[j])</span><br><span class="line">            &#123;</span><br><span class="line">                dst[i] = mytable[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">base64自定义字符表解密</span></span><br><span class="line"><span class="comment">char* src       存放待解密字符串的数组</span></span><br><span class="line"><span class="comment">char* dst       存放解密后字符串的数组</span></span><br><span class="line"><span class="comment">char* mytable   自定义字符表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">base64_myde</span><span class="params">(<span class="keyword">char</span>* src, <span class="keyword">char</span>* dst, <span class="keyword">char</span>* mytable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">char</span> base64_table[<span class="number">65</span>] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> len_s = <span class="built_in">strlen</span>(src);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len_s; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">65</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (src[i] == mytable[j])</span><br><span class="line">            &#123;</span><br><span class="line">                src[i] = base64_table[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    base64_decode((<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>*)src, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="AES算法"><a href="#AES算法" class="headerlink" title="AES算法"></a>AES算法</h1><table><thead><tr><th align="center">AES</th><th align="center">密钥长度(32位比特字)</th><th align="center">分组长度(32位比特字)</th><th align="center">加密轮数</th></tr></thead><tbody><tr><td align="center">AES-128</td><td align="center">4(128位)</td><td align="center">4</td><td align="center">10</td></tr><tr><td align="center">AES-192</td><td align="center">6</td><td align="center">4</td><td align="center">12</td></tr><tr><td align="center">AES-256</td><td align="center">8</td><td align="center">4</td><td align="center">14</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="2020020601/AES-0.jpg"></p><h2 id="字节代换操作"><a href="#字节代换操作" class="headerlink" title="字节代换操作"></a>字节代换操作</h2><p>状态矩阵中的元素按照下面的方式映射为一个新的字节：</p><p>把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出。</p><p>例如，加密时，输出的字节S1为0x12,则查S盒的第0x01行和0x02列，得到值0xc9,然后替换S1原有的0x12为0xc9。</p><p>字节代换操作 S盒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> sbox[<span class="number">256</span>]=&#123;</span><br><span class="line">    <span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,</span><br><span class="line">    <span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,</span><br><span class="line">    <span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>,</span><br><span class="line">    <span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,</span><br><span class="line">    <span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,</span><br><span class="line">    <span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,</span><br><span class="line">    <span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,</span><br><span class="line">    <span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>,</span><br><span class="line">    <span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,</span><br><span class="line">    <span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>,</span><br><span class="line">    <span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,</span><br><span class="line">    <span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>,</span><br><span class="line">    <span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,</span><br><span class="line">    <span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,</span><br><span class="line">    <span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>,</span><br><span class="line">    <span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,</span><br><span class="line">    <span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,</span><br><span class="line">    <span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,</span><br><span class="line">    <span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>,</span><br><span class="line">    <span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,</span><br><span class="line">    <span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,</span><br><span class="line">    <span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>,</span><br><span class="line">    <span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,</span><br><span class="line">    <span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>字节代换逆操作 逆S盒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> contrary_sbox[<span class="number">256</span>]=&#123;</span><br><span class="line">    <span class="number">0x52</span>,<span class="number">0x09</span>,<span class="number">0x6a</span>,<span class="number">0xd5</span>,<span class="number">0x30</span>,<span class="number">0x36</span>,<span class="number">0xa5</span>,<span class="number">0x38</span>,</span><br><span class="line">    <span class="number">0xbf</span>,<span class="number">0x40</span>,<span class="number">0xa3</span>,<span class="number">0x9e</span>,<span class="number">0x81</span>,<span class="number">0xf3</span>,<span class="number">0xd7</span>,<span class="number">0xfb</span>,</span><br><span class="line">    <span class="number">0x7c</span>,<span class="number">0xe3</span>,<span class="number">0x39</span>,<span class="number">0x82</span>,<span class="number">0x9b</span>,<span class="number">0x2f</span>,<span class="number">0xff</span>,<span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0x34</span>,<span class="number">0x8e</span>,<span class="number">0x43</span>,<span class="number">0x44</span>,<span class="number">0xc4</span>,<span class="number">0xde</span>,<span class="number">0xe9</span>,<span class="number">0xcb</span>,</span><br><span class="line">    <span class="number">0x54</span>,<span class="number">0x7b</span>,<span class="number">0x94</span>,<span class="number">0x32</span>,<span class="number">0xa6</span>,<span class="number">0xc2</span>,<span class="number">0x23</span>,<span class="number">0x3d</span>,</span><br><span class="line">    <span class="number">0xee</span>,<span class="number">0x4c</span>,<span class="number">0x95</span>,<span class="number">0x0b</span>,<span class="number">0x42</span>,<span class="number">0xfa</span>,<span class="number">0xc3</span>,<span class="number">0x4e</span>,<span class="comment">//0x4e</span></span><br><span class="line">    <span class="number">0x08</span>,<span class="number">0x2e</span>,<span class="number">0xa1</span>,<span class="number">0x66</span>,<span class="number">0x28</span>,<span class="number">0xd9</span>,<span class="number">0x24</span>,<span class="number">0xb2</span>,</span><br><span class="line">    <span class="number">0x76</span>,<span class="number">0x5b</span>,<span class="number">0xa2</span>,<span class="number">0x49</span>,<span class="number">0x6d</span>,<span class="number">0x8b</span>,<span class="number">0xd1</span>,<span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x72</span>,<span class="number">0xf8</span>,<span class="number">0xf6</span>,<span class="number">0x64</span>,<span class="number">0x86</span>,<span class="number">0x68</span>,<span class="number">0x98</span>,<span class="number">0x16</span>,</span><br><span class="line">    <span class="number">0xd4</span>,<span class="number">0xa4</span>,<span class="number">0x5c</span>,<span class="number">0xcc</span>,<span class="number">0x5d</span>,<span class="number">0x65</span>,<span class="number">0xb6</span>,<span class="number">0x92</span>,</span><br><span class="line">    <span class="number">0x6c</span>,<span class="number">0x70</span>,<span class="number">0x48</span>,<span class="number">0x50</span>,<span class="number">0xfd</span>,<span class="number">0xed</span>,<span class="number">0xb9</span>,<span class="number">0xda</span>,</span><br><span class="line">    <span class="number">0x5e</span>,<span class="number">0x15</span>,<span class="number">0x46</span>,<span class="number">0x57</span>,<span class="number">0xa7</span>,<span class="number">0x8d</span>,<span class="number">0x9d</span>,<span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x90</span>,<span class="number">0xd8</span>,<span class="number">0xab</span>,<span class="number">0x00</span>,<span class="number">0x8c</span>,<span class="number">0xbc</span>,<span class="number">0xd3</span>,<span class="number">0x0a</span>,</span><br><span class="line">    <span class="number">0xf7</span>,<span class="number">0xe4</span>,<span class="number">0x58</span>,<span class="number">0x05</span>,<span class="number">0xb8</span>,<span class="number">0xb3</span>,<span class="number">0x45</span>,<span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0xd0</span>,<span class="number">0x2c</span>,<span class="number">0x1e</span>,<span class="number">0x8f</span>,<span class="number">0xca</span>,<span class="number">0x3f</span>,<span class="number">0x0f</span>,<span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0xc1</span>,<span class="number">0xaf</span>,<span class="number">0xbd</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x13</span>,<span class="number">0x8a</span>,<span class="number">0x6b</span>,</span><br><span class="line">    <span class="number">0x3a</span>,<span class="number">0x91</span>,<span class="number">0x11</span>,<span class="number">0x41</span>,<span class="number">0x4f</span>,<span class="number">0x67</span>,<span class="number">0xdc</span>,<span class="number">0xea</span>,</span><br><span class="line">    <span class="number">0x97</span>,<span class="number">0xf2</span>,<span class="number">0xcf</span>,<span class="number">0xce</span>,<span class="number">0xf0</span>,<span class="number">0xb4</span>,<span class="number">0xe6</span>,<span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x96</span>,<span class="number">0xac</span>,<span class="number">0x74</span>,<span class="number">0x22</span>,<span class="number">0xe7</span>,<span class="number">0xad</span>,<span class="number">0x35</span>,<span class="number">0x85</span>,</span><br><span class="line">    <span class="number">0xe2</span>,<span class="number">0xf9</span>,<span class="number">0x37</span>,<span class="number">0xe8</span>,<span class="number">0x1c</span>,<span class="number">0x75</span>,<span class="number">0xdf</span>,<span class="number">0x6e</span>,</span><br><span class="line">    <span class="number">0x47</span>,<span class="number">0xf1</span>,<span class="number">0x1a</span>,<span class="number">0x71</span>,<span class="number">0x1d</span>,<span class="number">0x29</span>,<span class="number">0xc5</span>,<span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x6f</span>,<span class="number">0xb7</span>,<span class="number">0x62</span>,<span class="number">0x0e</span>,<span class="number">0xaa</span>,<span class="number">0x18</span>,<span class="number">0xbe</span>,<span class="number">0x1b</span>,</span><br><span class="line">    <span class="number">0xfc</span>,<span class="number">0x56</span>,<span class="number">0x3e</span>,<span class="number">0x4b</span>,<span class="number">0xc6</span>,<span class="number">0xd2</span>,<span class="number">0x79</span>,<span class="number">0x20</span>,</span><br><span class="line">    <span class="number">0x9a</span>,<span class="number">0xdb</span>,<span class="number">0xc0</span>,<span class="number">0xfe</span>,<span class="number">0x78</span>,<span class="number">0xcd</span>,<span class="number">0x5a</span>,<span class="number">0xf4</span>,</span><br><span class="line">    <span class="number">0x1f</span>,<span class="number">0xdd</span>,<span class="number">0xa8</span>,<span class="number">0x33</span>,<span class="number">0x88</span>,<span class="number">0x07</span>,<span class="number">0xc7</span>,<span class="number">0x31</span>,</span><br><span class="line">    <span class="number">0xb1</span>,<span class="number">0x12</span>,<span class="number">0x10</span>,<span class="number">0x59</span>,<span class="number">0x27</span>,<span class="number">0x80</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,</span><br><span class="line">    <span class="number">0x60</span>,<span class="number">0x51</span>,<span class="number">0x7f</span>,<span class="number">0xa9</span>,<span class="number">0x19</span>,<span class="number">0xb5</span>,<span class="number">0x4a</span>,<span class="number">0x0d</span>,</span><br><span class="line">    <span class="number">0x2d</span>,<span class="number">0xe5</span>,<span class="number">0x7a</span>,<span class="number">0x9f</span>,<span class="number">0x93</span>,<span class="number">0xc9</span>,<span class="number">0x9c</span>,<span class="number">0xef</span>,</span><br><span class="line">    <span class="number">0xa0</span>,<span class="number">0xe0</span>,<span class="number">0x3b</span>,<span class="number">0x4d</span>,<span class="number">0xae</span>,<span class="number">0x2a</span>,<span class="number">0xf5</span>,<span class="number">0xb0</span>,</span><br><span class="line">    <span class="number">0xc8</span>,<span class="number">0xeb</span>,<span class="number">0xbb</span>,<span class="number">0x3c</span>,<span class="number">0x83</span>,<span class="number">0x53</span>,<span class="number">0x99</span>,<span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x17</span>,<span class="number">0x2b</span>,<span class="number">0x04</span>,<span class="number">0x7e</span>,<span class="number">0xba</span>,<span class="number">0x77</span>,<span class="number">0xd6</span>,<span class="number">0x26</span>,</span><br><span class="line">    <span class="number">0xe1</span>,<span class="number">0x69</span>,<span class="number">0x14</span>,<span class="number">0x63</span>,<span class="number">0x55</span>,<span class="number">0x21</span>,<span class="number">0x0c</span>,<span class="number">0x7d</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h2><p><img src= "/img/loading.gif" data-lazy-src="2020020601/AES-1.png"></p><h3 id="行移位操作"><a href="#行移位操作" class="headerlink" title="行移位操作"></a>行移位操作</h3><p>行移位是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节</p><h3 id="行移位的逆变换"><a href="#行移位的逆变换" class="headerlink" title="行移位的逆变换"></a>行移位的逆变换</h3><p>行移位的逆变换是将状态矩阵中的每一行执行相反的移位操作，例如AES-128中，状态矩阵的第0行右移0字节，第1行右移1字节，第2行右移2字节，第3行右移3字节。</p><h2 id="列混合"><a href="#列混合" class="headerlink" title="列混合"></a>列混合</h2><p>列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的<strong>矩阵相乘</strong>，得到混淆后的状态矩阵</p><p>固定矩阵：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">02 03 01 01</span><br><span class="line">01 02 03 01</span><br><span class="line">01 01 02 03</span><br><span class="line">03 01 01 02</span><br></pre></td></tr></table></figure><p>列混合逆运算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0E 0B 0D 09</span><br><span class="line">09 0E 0B 0D</span><br><span class="line">0D 09 0E 0B</span><br><span class="line">0B 0D 09 0E</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RSA算法&quot;&gt;&lt;a href=&quot;#RSA算法&quot; class=&quot;headerlink&quot; title=&quot;RSA算法&quot;&gt;&lt;/a&gt;RSA算法&lt;/h1&gt;&lt;h2 id=&quot;数学基础知识&quot;&gt;&lt;a href=&quot;#数学基础知识&quot; class=&quot;headerlink&quot; title=&quot;数
      
    
    </summary>
    
    
      <category term="ctf-re" scheme="https://Forgo7ten.github.io/categories/ctf-re/"/>
    
      <category term="re学习" scheme="https://Forgo7ten.github.io/categories/ctf-re/re%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="加密算法" scheme="https://Forgo7ten.github.io/categories/ctf-re/re%E5%AD%A6%E4%B9%A0/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ctf-re" scheme="https://Forgo7ten.github.io/tags/ctf-re/"/>
    
      <category term="工具/python库使用" scheme="https://Forgo7ten.github.io/tags/%E5%B7%A5%E5%85%B7-python%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    
      <category term="加密算法" scheme="https://Forgo7ten.github.io/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记：CTF-pwn环境搭建(不定时更新)</title>
    <link href="https://forgo7ten.github.io/2020/02/05/2020020501/"/>
    <id>https://forgo7ten.github.io/2020/02/05/2020020501/</id>
    <published>2020-02-05T10:32:44.000Z</published>
    <updated>2020-02-06T06:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu虚拟机安装"><a href="#ubuntu虚拟机安装" class="headerlink" title="ubuntu虚拟机安装"></a>ubuntu虚拟机安装</h1><h2 id="安装Ubuntu时候语言选择默认英文"><a href="#安装Ubuntu时候语言选择默认英文" class="headerlink" title="安装Ubuntu时候语言选择默认英文"></a>安装Ubuntu时候语言选择默认英文</h2><h2 id="将Ubuntu系统语言更换为简体中文"><a href="#将Ubuntu系统语言更换为简体中文" class="headerlink" title="将Ubuntu系统语言更换为简体中文"></a>将Ubuntu系统语言更换为简体中文</h2><p><a href="https://blog.csdn.net/qq_19339041/article/details/80058575">ubuntu 16.04 更改系统语言为简体中文</a><br>System Settings→Language Support<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200204181353420.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020020418140546.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200204181422742.png" alt="在这里插入图片描述"><br>重启后会改变<br><strong>标准文件夹不要更新名称！！！</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200204181627107.png" alt="在这里插入图片描述"></p><h2 id="安装VMwareTools"><a href="#安装VMwareTools" class="headerlink" title="安装VMwareTools"></a>安装VMwareTools</h2><p><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/15.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html">在 Linux 虚拟机中手动安装 VMware Tools</a><br>（将VMtools安装包解压到目录，在目录里管理员运行<code>vmware-install.pl</code>即可）</p><h1 id="ctf环境安装"><a href="#ctf环境安装" class="headerlink" title="ctf环境安装"></a>ctf环境安装</h1><p><strong>建议Ubuntu和pip都换源后再进行下载操作</strong></p><h2 id="Ubuntu系统更新软件"><a href="#Ubuntu系统更新软件" class="headerlink" title="Ubuntu系统更新软件"></a>Ubuntu系统更新软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">升级安装包相关的命令,刷新可安装的软件列表(但是不做任何实际的安装动作)</span><br><span class="line"></span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">进行安装包的更新(软件版本的升级)</span><br></pre></td></tr></table></figure><h2 id="为64位系统提供32位运行环境支撑"><a href="#为64位系统提供32位运行环境支撑" class="headerlink" title="为64位系统提供32位运行环境支撑"></a>为64位系统提供32位运行环境支撑</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install lib32z1</span><br><span class="line">sudo apt-get -y install libc6-i386</span><br><span class="line">sudo apt-get -y install libc6-dev</span><br><span class="line">sudo apt-get install lib32stdc++6</span><br><span class="line">sudo apt-get install libstdc++6</span><br></pre></td></tr></table></figure><h2 id="安装PWNGDB"><a href="#安装PWNGDB" class="headerlink" title="安装PWNGDB"></a>安装PWNGDB</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg</span><br><span class="line"><span class="built_in">cd</span> pwndbg</span><br><span class="line">sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>若报错<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200205154022351.png" alt="在这里插入图片描述"><br>改为<code>sudo -H ./setup.sh</code></p><p><strong>安装完后pwngdb文件夹不能删除</strong></p><h2 id="安装peda"><a href="#安装peda" class="headerlink" title="安装peda"></a>安装peda</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/longld/peda.git ~/peda</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/peda/peda.py&quot;</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3</span><br></pre></td></tr></table></figure><h2 id="安装pwntools"><a href="#安装pwntools" class="headerlink" title="安装pwntools"></a>安装pwntools</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential</span><br><span class="line">sudo pip install --upgrade pip</span><br><span class="line">sudo pip install --upgrade pwntools</span><br></pre></td></tr></table></figure><p>安装过程中如果报“error in cryptography setup command: Invalid environment marker: python_version &lt; ‘3’”这个错误<br>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade setuptools</span><br></pre></td></tr></table></figure><p>通过在python中输入<code>from pwn import * </code>来验证是否安装成功</p><h2 id="安装OneGadget"><a href="#安装OneGadget" class="headerlink" title="安装OneGadget"></a>安装OneGadget</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install ruby</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure><h2 id="安装OneGadget-1"><a href="#安装OneGadget-1" class="headerlink" title="安装OneGadget"></a>安装OneGadget</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/JonathanSalwan/ROPgadget.git</span><br><span class="line"><span class="built_in">cd</span> ROPgadget</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><h2 id="gcc编译环境安装"><a href="#gcc编译环境安装" class="headerlink" title="gcc编译环境安装"></a>gcc编译环境安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc</span><br></pre></td></tr></table></figure><h2 id="qira调试工具安装"><a href="#qira调试工具安装" class="headerlink" title="qira调试工具安装"></a>qira调试工具安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/BinaryAnalysisPlatform/qira.git</span><br><span class="line"><span class="built_in">cd</span> qira/</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>安装后使用<code>qira -s /bin/ls</code>来测试是否安装成功</p><p>如果报TypeError: type object got multiple values for keyword argument ‘log’ 错误<br>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> &lt;qira-dir&gt;/venv/bin/activate</span><br><span class="line">pip uninstall Flask-SocketIO</span><br><span class="line">pip install Flask-SocketIO==2.9.1</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="突然连不上网，网络图标消失"><a href="#突然连不上网，网络图标消失" class="headerlink" title="突然连不上网，网络图标消失"></a>突然连不上网，网络图标消失</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service network-manager restart</span><br></pre></td></tr></table></figure><h2 id="修改Ubuntu短密码"><a href="#修改Ubuntu短密码" class="headerlink" title="修改Ubuntu短密码"></a>修改Ubuntu短密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd  <span class="comment">#修改root密码</span></span><br><span class="line">sudo passwd 用户名  <span class="comment">#修改用户名密码</span></span><br></pre></td></tr></table></figure><p>按提示修改密码</p><h2 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h2><ol><li>在home目录里新建文件夹<code>.pip</code></li><li>在创建好的<code>.pip</code>文件夹中创建名为<code>pip.conf</code>的文件</li><li>在pip.conf文件中输入 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout &#x3D; 6000</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line">trusted-host &#x3D; pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>(此处用的是清华大学的pip源，可自行更换pip源网址)<h2 id="vscode安装"><a href="#vscode安装" class="headerlink" title="vscode安装"></a>vscode安装</h2></li><li>Ubuntu自带软件中心中搜索Visual Studio Code下载<br> 页面中就可以直接选择安装</li><li>从<a href="https://code.visualstudio.com/">vscode官网</a>下载最新版本，下载<strong>deb包</strong><br>安装命令：<code>dpkg -i   安装包</code></li><li>启动命令：<code>code</code></li></ol><h2 id="Ubuntu16-04安装ibus中文输入法"><a href="#Ubuntu16-04安装ibus中文输入法" class="headerlink" title="Ubuntu16.04安装ibus中文输入法"></a>Ubuntu16.04安装ibus中文输入法</h2><ol><li>安装Chinese语言包</li><li>安装ibus拼音 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ibus-pinyin</span><br></pre></td></tr></table></figure></li><li><code>sudo ibus-setup</code></li><li><strong>重启系统</strong></li><li><code>sudo ibus-setup</code>打开ibus首选项<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020020522324094.png" alt="在这里插入图片描述"></li><li>Ubuntu系统设置→文本输入(Text Entry)<br> 添加上ibus拼音输入法<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200205223452263.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/202002052238526.png" alt="在这里插入图片描述"></li></ol><h2 id="安装vim命令"><a href="#安装vim命令" class="headerlink" title="安装vim命令"></a>安装vim命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><p>vim使用：<a href="https://www.runoob.com/linux/linux-vim.html">Linux vi/vim</a></p><h2 id="无法锁定管理目录-var-lib-dpkg"><a href="#无法锁定管理目录-var-lib-dpkg" class="headerlink" title="无法锁定管理目录(/var/lib/dpkg/)"></a>无法锁定管理目录(/var/lib/dpkg/)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo rm /var/lib/dpkg/lock</span><br></pre></td></tr></table></figure><p>无法获得锁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/lib/dpkg/lock</span><br><span class="line"><span class="comment"># 强制删除锁所在目录</span></span><br></pre></td></tr></table></figure><p>E: 无法获得锁 /var/lib/apt/lists/lock - open (11: 资源暂时不可用)<br>E: 无法对目录 /var/lib/apt/lists/ 加锁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/lib/apt/lists/lock</span><br></pre></td></tr></table></figure><h2 id="开机提示“检测到系统程序出现问题”"><a href="#开机提示“检测到系统程序出现问题”" class="headerlink" title="开机提示“检测到系统程序出现问题”"></a>开机提示“检测到系统程序出现问题”</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/crash/* <span class="comment"># 删除错误报告</span></span><br><span class="line">sudo gedit /etc/default/apport</span><br><span class="line"><span class="comment">#将enabled=1 改为 enabled=0</span></span><br></pre></td></tr></table></figure><h2 id="ubuntu16-04升级python到3-7"><a href="#ubuntu16-04升级python到3-7" class="headerlink" title="ubuntu16.04升级python到3.7"></a>ubuntu16.04升级python到3.7</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line"><span class="comment"># 添加自定义源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># 更新软件包</span></span><br><span class="line">sudo apt-get install python3.7</span><br><span class="line"><span class="comment"># 安装python3.7</span></span><br><span class="line">sudo apt-get -y install python3.7 python3.7-dev python3-pip</span><br><span class="line"><span class="comment"># 安装python3.7-dev啥玩意和pip</span></span><br><span class="line">python3.7 -m pip install pip --upgrade</span><br><span class="line">pip install --upgrade pip</span><br><span class="line"><span class="comment"># 升级pip</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.5 1</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 2</span><br><span class="line"><span class="comment"># 设置python的时候出来python3.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置python3时候出来python3.7</span></span><br><span class="line">1. 打开.bashrc</span><br><span class="line">     vim ~/.bashrc</span><br><span class="line"> 2. 在.bashrc中添加</span><br><span class="line">     <span class="built_in">alias</span> python3=python3.7</span><br><span class="line">     or</span><br><span class="line">     <span class="built_in">alias</span> python3=<span class="string">&#x27;/usr/bin/python3.7&#x27;</span></span><br><span class="line"> 3. 保存并退出文件编辑，使配置生效</span><br><span class="line">     <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 更改软链接，设置默认唤起python3版本</span></span><br><span class="line">sudo rm /usr/bin/python</span><br><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><h2 id="pip安装命令"><a href="#pip安装命令" class="headerlink" title="pip安装命令"></a>pip安装命令</h2><p>如果 Python2 和 Python3 同时有 pip，则使用方法如下：</p><ul><li>Python2：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 -m pip install XXX</span><br></pre></td></tr></table></figure></li><li>Python3:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install XXX</span><br></pre></td></tr></table></figure><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install SomePackage              <span class="comment"># 最新版本</span></span><br><span class="line">pip install SomePackage==1.0.4       <span class="comment"># 指定版本</span></span><br></pre></td></tr></table></figure><h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall SomePackage</span><br></pre></td></tr></table></figure><h3 id="升级pip"><a href="#升级pip" class="headerlink" title="升级pip"></a>升级pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -U pip</span><br><span class="line">或者</span><br><span class="line">sudo easy_install --upgrade pip</span><br></pre></td></tr></table></figure><h2 id="apt-get系列命令"><a href="#apt-get系列命令" class="headerlink" title="apt-get系列命令"></a>apt-get系列命令</h2><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove &lt;软件名&gt;  <span class="comment">#只删除软件</span></span><br><span class="line">sudo apt-get purge &lt;软件名&gt;   <span class="comment">#删除软件及其配置文件</span></span><br></pre></td></tr></table></figure><h3 id="删除软件安装包"><a href="#删除软件安装包" class="headerlink" title="删除软件安装包"></a>删除软件安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get clean</span><br></pre></td></tr></table></figure><h3 id="除非必要，不要使用sudo-apt-get-autoremove"><a href="#除非必要，不要使用sudo-apt-get-autoremove" class="headerlink" title="除非必要，不要使用sudo apt-get autoremove"></a>除非必要，不要使用sudo apt-get autoremove</h3><h2 id="vm虚拟机速度优化"><a href="#vm虚拟机速度优化" class="headerlink" title="vm虚拟机速度优化"></a>vm虚拟机速度优化</h2><ol><li><p>优化快照速度：<br>vm虚拟机菜单栏→编辑→首选项→优先级→【取消对勾】尽可能在后台拍摄/还原快照</p></li><li><p>vm虚拟机菜单栏→编辑→首选项→<br>优先级→抓取的输入内容(高)<br>内存→【勾选】调整所有虚拟机内存使其适应预留的主机RAM</p></li><li><p>编辑虚拟机设置→高级→<br> 抓取的输入内容(高)<br> 【勾选】禁用内存页面修整</p></li></ol><h1 id="python库安装"><a href="#python库安装" class="headerlink" title="python库安装"></a>python库安装</h1><h2 id="z3约束器安装"><a href="#z3约束器安装" class="headerlink" title="z3约束器安装"></a>z3约束器安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/angr/angr-z3.git</span><br><span class="line"><span class="built_in">cd</span> angr-z3</span><br><span class="line">python scripts/mk_make.py</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>其中第三个命令有参数，自定义z3包的安装位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例 python2安装z3</span></span><br><span class="line">python scripts/mk_make.py --prefix=/home/palmer --python --pypkgdir=/home/palmer/.<span class="built_in">local</span>/lib/python2.7/site-packages</span><br><span class="line"><span class="comment"># 示例 python3安装z3</span></span><br><span class="line">python3 scripts/mk_make.py --prefix=/home/cx330 --python --pypkgdir=/home/cx330/.<span class="built_in">local</span>/lib/python3.6/site-packages</span><br><span class="line"></span><br><span class="line">python scripts/mk_make.py --prefix=想安装到的目录 --python --pypkgdir=你的python第三方库地址</span><br><span class="line">prefix 我设置的用户根目录</span><br><span class="line">pypkgdir 去找python的包目录</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200205115602578.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200205122644145.png" alt="在这里插入图片描述"></p><h2 id="python安装gmpy2库"><a href="#python安装gmpy2库" class="headerlink" title="python安装gmpy2库"></a>python安装gmpy2库</h2><ol><li><p>安装三个依赖库gmp mpfr mpc</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libgmp-dev</span><br><span class="line">sudo apt-get install libmpfr-dev</span><br><span class="line">sudo apt-get install libmpc-dev</span><br></pre></td></tr></table></figure></li><li><p>gmpy2 安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install gmpy2</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">sudo pip install gmpy2</span><br></pre></td></tr></table></figure><h2 id="python安装Angr"><a href="#python安装Angr" class="headerlink" title="python安装Angr"></a>python安装Angr</h2></li><li><p>安装依赖</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev libffi-dev build-essential virtualenvwrapper</span><br><span class="line"><span class="comment">#第二步报错 mkvirtualenv未找到命令 时，执行下面一条/两条命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#export WORKON_HOME=$HOME/Python-workhome</span></span><br><span class="line"><span class="built_in">source</span> /usr/share/virtualenvwrapper/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></li><li><p>安装angr</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv --python=$(<span class="built_in">which</span> python3) angr &amp;&amp; pip install angr</span><br></pre></td></tr></table></figure><ul><li><p>若报错：ERROR: pyvex 7.8.9.26 has requi rement future=-0.16.0, but you’ll have future 0.18.2 which is incompatible.<br>将python2和python3的future均改为0.16.0版本<br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pip uninstall future</span><br><span class="line">sudo pip install future==0.16.0</span><br><span class="line">sudo pip3 uninstall future</span><br><span class="line">sudo pip3 install future==0.16.0</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>官方文档：<a href="https://github.com/a7vinx/angr-doc-zh_CN/blob/master/INSTALL.md">angr官方文档</a> || <a href="https://docs.angr.io/">angr使用文档</a></p><h2 id="python安装pysm4库"><a href="#python安装pysm4库" class="headerlink" title="python安装pysm4库"></a>python安装pysm4库</h2><p><strong>安装完成后pysm4文件夹不能删除！！</strong>提前选好安装位置</p><p>(好像可以删除)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yang3yen/pysm4.git</span><br><span class="line"><span class="built_in">cd</span> pysm4</span><br><span class="line">sudo python setup.py install</span><br><span class="line"><span class="comment"># 默认python2安装，python3请特指</span></span><br></pre></td></tr></table></figure><h2 id="python安装pycrypto，pycrytodome和crypto"><a href="#python安装pycrypto，pycrytodome和crypto" class="headerlink" title="python安装pycrypto，pycrytodome和crypto"></a>python安装pycrypto，pycrytodome和crypto</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure><p>即可安装</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ubuntu虚拟机安装&quot;&gt;&lt;a href=&quot;#ubuntu虚拟机安装&quot; class=&quot;headerlink&quot; title=&quot;ubuntu虚拟机安装&quot;&gt;&lt;/a&gt;ubuntu虚拟机安装&lt;/h1&gt;&lt;h2 id=&quot;安装Ubuntu时候语言选择默认英文&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="ctf-pwn" scheme="https://Forgo7ten.github.io/categories/ctf-pwn/"/>
    
    
      <category term="工具/python库使用" scheme="https://Forgo7ten.github.io/tags/%E5%B7%A5%E5%85%B7-python%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    
      <category term="ctf-pwn" scheme="https://Forgo7ten.github.io/tags/ctf-pwn/"/>
    
      <category term="linux" scheme="https://Forgo7ten.github.io/tags/linux/"/>
    
      <category term="CTF环境搭建" scheme="https://Forgo7ten.github.io/tags/CTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>python-bytecode|python字节码学习</title>
    <link href="https://forgo7ten.github.io/2020/01/28/2020012801/"/>
    <id>https://forgo7ten.github.io/2020/01/28/2020012801/</id>
    <published>2020-01-28T13:41:05.000Z</published>
    <updated>2020-01-28T13:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-bytecode"><a href="#python-bytecode" class="headerlink" title="python-bytecode"></a>python-bytecode</h1><p>官方文档:<a href="https://docs.python.org/zh-cn/3.7/library/dis.html">dis — Python 字节码反汇编器</a></p><h3 id="栈基本操作"><a href="#栈基本操作" class="headerlink" title="栈基本操作"></a>栈基本操作</h3><table><thead><tr><th>TOS</th><th>栈顶(栈上最高地址的值)</th></tr></thead><tbody><tr><td>TOS1</td><td>栈上第二高地址的值</td></tr><tr><td>TOS2</td><td>栈上第三高地址的值</td></tr><tr><td>…………</td><td></td></tr></tbody></table><ul><li><p>LOAD_NAME</p><p>压栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOAD_GLOBAL:全局变量</span><br><span class="line">LOAD_FAST:局部变量</span><br><span class="line">LOAD_CONST:常量</span><br><span class="line">LOAD_ATTR:对象中的属性</span><br></pre></td></tr></table></figure></li><li><p>POP_TOP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop</span><br></pre></td></tr></table></figure></li><li><p>ROT_TWO</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS1，TOS1互换</span><br></pre></td></tr></table></figure></li><li><p>ROT_THREE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">栈顶三元素循环位移</span><br><span class="line">1-&gt;3</span><br></pre></td></tr></table></figure></li><li><p>ROT_FOUR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">栈顶四元素循环位移</span><br><span class="line">1-&gt;4</span><br></pre></td></tr></table></figure></li><li><p>DUP_TOP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制栈顶元素压栈</span><br></pre></td></tr></table></figure></li><li><p>DUP_TOPX(count)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制栈顶count个元素再按原顺序压栈 count范围[1,5]</span><br></pre></td></tr></table></figure></li></ul><h3 id="UNARY"><a href="#UNARY" class="headerlink" title="UNARY"></a>UNARY</h3><p>栈顶元素弹出去，运算后压栈</p><ul><li><p>UNARY_NEGATIVE</p><p>取负</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; -TOS</span><br></pre></td></tr></table></figure></li><li><p>UNARY_NOT</p><p>逻辑取反</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; not TOS</span><br></pre></td></tr></table></figure></li><li><p>UNARY_INVERT</p><p>按位取反</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; ~ TOS</span><br></pre></td></tr></table></figure></li></ul><h3 id="BINARY"><a href="#BINARY" class="headerlink" title="BINARY"></a>BINARY</h3><p>栈顶两元素弹出去，运算后压栈</p><ul><li><p>BINARY_ADD</p><p>加法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 + TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_SUBTRACT</p><p>减法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 - TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_MULTIPLY</p><p>乘法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 * TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_DIVIDE</p><p>除法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 &#x2F; TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_MODULO</p><p>取模</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 % TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_POWER</p><p>幂运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 ** TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_LSHIFT</p><p>左移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 &lt;&lt; TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_RSHIFT</p><p>右移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 &gt;&gt; TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_AND</p><p>与</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 &amp; TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_OR</p><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 | TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_XOR</p><p>异或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1 ^ TOS</span><br></pre></td></tr></table></figure></li><li><p>BINARY_SUBSCR</p><p>索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS &#x3D; TOS1[TOS]</span><br></pre></td></tr></table></figure></li></ul><h3 id="INPLACE"><a href="#INPLACE" class="headerlink" title="INPLACE"></a>INPLACE</h3><p>栈顶两元素弹出去，运算后压栈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    a +=<span class="number">1</span></span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_FAST                0 (a)</span><br><span class="line">            3 LOAD_CONST               1 (1)</span><br><span class="line">            6 INPLACE_ADD</span><br><span class="line">            7 STORE_FAST               0 (a)</span><br><span class="line"></span><br><span class="line">7          10 LOAD_FAST                0 (a)</span><br><span class="line">           13 LOAD_CONST               1 (1)</span><br><span class="line">           16 BINARY_ADD</span><br><span class="line">           17 STORE_FAST               0 (a)</span><br><span class="line">           20 LOAD_CONST               0 (None)</span><br><span class="line">           23 RETURN_VALUE</span><br></pre></td></tr></table></figure><h3 id="BUILD"><a href="#BUILD" class="headerlink" title="BUILD"></a>BUILD</h3><ul><li><p>BUILD_CLASS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用当前栈上信息创建类</span><br></pre></td></tr></table></figure></li><li><p>BUILD_TUPLE(count)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从栈顶取count个元素，创建一个tuple对象压栈</span><br></pre></td></tr></table></figure></li><li><p>BUILD_LIST(count)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从栈顶取count个元素，创建一个list对象压栈</span><br></pre></td></tr></table></figure></li><li><p>BUILD_SET(count)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从栈顶取count个元素，创建一个set对象压栈</span><br></pre></td></tr></table></figure></li><li><p>BUILD_MAP(count)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从栈顶取count个元素，创建一个map对象压栈</span><br></pre></td></tr></table></figure></li><li><p>BUILD_SLICE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个SLICE对象，保存start,stop,step三个参数</span><br></pre></td></tr></table></figure></li></ul><h3 id="SLICE"><a href="#SLICE" class="headerlink" title="SLICE"></a>SLICE</h3><ul><li><p>SLICE+0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    a[:]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_FAST                0 (a)</span><br><span class="line">            3 SLICE+0</span><br><span class="line">            4 POP_TOP</span><br><span class="line">            5 LOAD_CONST               0 (None)</span><br><span class="line">            8 RETURN_VALUE</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>SLICE+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    a[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_FAST                0 (a)</span><br><span class="line">            3 LOAD_CONST               1 (1)</span><br><span class="line">            6 SLICE+1</span><br><span class="line">            7 POP_TOP</span><br><span class="line">            8 LOAD_CONST               0 (None)</span><br><span class="line">           11 RETURN_VALUE</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>SLICE+2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    a[:<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_FAST                0 (a)</span><br><span class="line">            3 LOAD_CONST               1 (1)</span><br><span class="line">            6 SLICE+2</span><br><span class="line">            7 POP_TOP</span><br><span class="line">            8 LOAD_CONST               0 (None)</span><br><span class="line">           11 RETURN_VALUE</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>SLICE+3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    a[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_FAST                0 (a)</span><br><span class="line">            3 LOAD_CONST               1 (1)</span><br><span class="line">            6 LOAD_CONST               2 (2)</span><br><span class="line">            9 SLICE+3</span><br><span class="line">           10 POP_TOP</span><br><span class="line">           11 LOAD_CONST               0 (None)</span><br><span class="line">           14 RETURN_VALUE</span><br></pre></td></tr></table></figure></li><li><p>BUILD_SLICE</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    a[<span class="number">1</span>:<span class="number">2</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_FAST                0 (a)</span><br><span class="line">            3 LOAD_CONST               0 (None)</span><br><span class="line">            6 LOAD_CONST               0 (None)</span><br><span class="line">            9 LOAD_CONST               1 (3)</span><br><span class="line">           12 BUILD_SLICE              3</span><br><span class="line">           15 BINARY_SUBSCR</span><br><span class="line">           16 POP_TOP</span><br><span class="line">           17 LOAD_CONST               0 (None)</span><br><span class="line">           20 RETURN_VALUE</span><br></pre></td></tr></table></figure></li></ul><h3 id="STORE"><a href="#STORE" class="headerlink" title="STORE"></a>STORE</h3><p>栈顶弹出去赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_CONST               1 (1)</span><br><span class="line">            3 STORE_FAST               0 (a)</span><br><span class="line">            6 LOAD_CONST               0 (None)</span><br><span class="line">            9 RETURN_VALUE</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STORE_GLOBAL:全局变量</span><br><span class="line">STORE_FAST:局部变量</span><br><span class="line">STORE_ATTR:对象中的属性</span><br></pre></td></tr></table></figure><ul><li>STORE_SUBSCR</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOS1[TOS] &#x3D; TOS2</span><br></pre></td></tr></table></figure><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>删除</p><ul><li><p>DELETE_NAME</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">del</span> a</span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6           0 DELETE_FAST              0 (a)</span><br><span class="line">            3 LOAD_CONST               0 (None)</span><br><span class="line">            6 RETURN_VALUE</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE_GLOBAL:全局变量</span><br><span class="line">DELETE_FAST:局部变量</span><br><span class="line">DELETE_ATTR:对象中的属性</span><br><span class="line">DELETE_SLICE+():SLICE</span><br></pre></td></tr></table></figure></li></ul><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><ul><li><p>COMPARE_OP(op)</p><p>对栈顶的两个元素做op指定的比较操作，结果压栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def test(a,b):</span><br><span class="line">    a&gt;b</span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_FAST                0 (a)</span><br><span class="line">            3 LOAD_FAST                1 (b)</span><br><span class="line">            6 COMPARE_OP               4 (&gt;)</span><br><span class="line">            9 POP_TOP</span><br><span class="line">           10 LOAD_CONST               0 (None)</span><br><span class="line">           13 RETURN_VALUE</span><br></pre></td></tr></table></figure></li><li><p>POP_JUMP_IF_TRUE(target)</p><p>栈顶弹出，如果为true跳转到target</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a&gt;b:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_FAST                0 (a)</span><br><span class="line">            3 LOAD_FAST                1 (b)</span><br><span class="line">            6 COMPARE_OP               4 (&gt;)</span><br><span class="line">            9 POP_JUMP_IF_TRUE        15</span><br><span class="line">  </span><br><span class="line">7          12 JUMP_FORWARD             0 (to 15)</span><br><span class="line">      &gt;&gt;   15 LOAD_CONST               0 (None)</span><br><span class="line">           18 RETURN_VALUE</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>POP_JUMP_IF_FALSE(target)</p><p>栈顶弹出，如果为false跳转到target</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_FAST                0 (a)</span><br><span class="line">            3 LOAD_FAST                1 (b)</span><br><span class="line">            6 COMPARE_OP               4 (&gt;)</span><br><span class="line">            9 POP_JUMP_IF_FALSE       15</span><br><span class="line">  </span><br><span class="line">7          12 JUMP_FORWARD             0 (to 15)</span><br><span class="line">      &gt;&gt;   15 LOAD_CONST               0 (None)</span><br><span class="line">           18 RETURN_VALUE</span><br></pre></td></tr></table></figure></li><li><p>JUMP_IF_TRUE_OR_POP(target)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果栈顶是true跳转到target，保留栈顶。否则栈顶弹出</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>JUMP_IF_FALSE_OR_POP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果栈顶是false跳转到target，保留栈顶。否则栈顶弹出</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>JUMP_FORWARD(x)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">向前跳转x字节</span><br></pre></td></tr></table></figure></li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li><p>for 循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">6           0 SETUP_LOOP              20 (to 23)</span><br><span class="line">            3 LOAD_GLOBAL              0 (range)</span><br><span class="line">            6 LOAD_CONST               1 (10)</span><br><span class="line">            9 CALL_FUNCTION            1</span><br><span class="line">           12 GET_ITER</span><br><span class="line">      &gt;&gt;   13 FOR_ITER                 6 (to 22)</span><br><span class="line">           16 STORE_FAST               1 (i)</span><br><span class="line">  </span><br><span class="line">7          19 JUMP_ABSOLUTE           13</span><br><span class="line">      &gt;&gt;   22 POP_BLOCK</span><br><span class="line">      &gt;&gt;   23 LOAD_CONST               0 (None)</span><br><span class="line">           26 RETURN_VALUE</span><br></pre></td></tr></table></figure></li><li><p>while 循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6           0 SETUP_LOOP              10 (to 13)</span><br><span class="line">      &gt;&gt;    3 LOAD_GLOBAL              0 (True)</span><br><span class="line">            6 POP_JUMP_IF_FALSE       12</span><br><span class="line">  </span><br><span class="line">7           9 JUMP_ABSOLUTE            3</span><br><span class="line">      &gt;&gt;   12 POP_BLOCK</span><br><span class="line">      &gt;&gt;   13 LOAD_CONST               0 (None)</span><br><span class="line">           16 RETURN_VALUE</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>GET_ITER</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">取迭代器</span><br></pre></td></tr></table></figure></li><li><p>BREAK_LOOP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">break</span><br><span class="line">取pytry_block中的handler获取循环结束后的下一条指令地址,跳出循环</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><ul><li><p>CALL_FUNCTION</p><p>调用函数，调用前将pyfuntionobject和实参压栈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">dis.dis(test2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">8           0 LOAD_GLOBAL              0 (test)</span><br><span class="line">            3 LOAD_CONST               1 (1)</span><br><span class="line">            6 LOAD_CONST               2 (2)</span><br><span class="line">            9 LOAD_CONST               3 (3)</span><br><span class="line">           12 CALL_FUNCTION            3</span><br><span class="line">           15 POP_TOP</span><br><span class="line">           16 LOAD_CONST               0 (None)</span><br><span class="line">           19 RETURN_VALUE</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    dis.dis(a)</span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_GLOBAL              0 (dis)</span><br><span class="line">            3 LOAD_ATTR                0 (dis)</span><br><span class="line">            6 LOAD_FAST                0 (a)</span><br><span class="line">            9 CALL_FUNCTION            1</span><br><span class="line">           12 POP_TOP</span><br><span class="line">           13 LOAD_CONST               0 (None)</span><br><span class="line">           16 RETURN_VALUE</span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li><p>RETURN_VALUE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">栈顶元素作为返回值</span><br></pre></td></tr></table></figure></li></ul><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><ul><li><p>PRINT_ITEM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打印栈顶元素到标准输出</span><br></pre></td></tr></table></figure></li><li><p>PRINT_NEWLINE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打印回车到标准输出</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">dis.dis(test)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6           0 LOAD_FAST                0 (a)</span><br><span class="line">            3 PRINT_ITEM</span><br><span class="line">            4 PRINT_NEWLINE</span><br><span class="line">            5 LOAD_CONST               0 (None)</span><br><span class="line">            8 RETURN_VALUE</span><br></pre></td></tr></table></figure></li></ul><h3 id="NOP"><a href="#NOP" class="headerlink" title="NOP"></a>NOP</h3><ul><li><p>NOP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nop</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-bytecode&quot;&gt;&lt;a href=&quot;#python-bytecode&quot; class=&quot;headerlink&quot; title=&quot;python-bytecode&quot;&gt;&lt;/a&gt;python-bytecode&lt;/h1&gt;&lt;p&gt;官方文档:&lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="ctf-re" scheme="https://Forgo7ten.github.io/categories/ctf-re/"/>
    
      <category term="re学习" scheme="https://Forgo7ten.github.io/categories/ctf-re/re%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="工具/python库使用" scheme="https://Forgo7ten.github.io/categories/ctf-re/re%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E5%85%B7-python%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="ctf-re" scheme="https://Forgo7ten.github.io/tags/ctf-re/"/>
    
      <category term="工具/python库使用" scheme="https://Forgo7ten.github.io/tags/%E5%B7%A5%E5%85%B7-python%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Z3安装_语句详解</title>
    <link href="https://forgo7ten.github.io/2020/01/16/2020011601/"/>
    <id>https://forgo7ten.github.io/2020/01/16/2020011601/</id>
    <published>2020-01-16T07:13:51.000Z</published>
    <updated>2020-01-16T07:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Z3安装"><a href="#Z3安装" class="headerlink" title="Z3安装"></a>Z3安装</h1><p>linux安装Z3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Z3Prover/z3.git</span><br><span class="line"><span class="built_in">cd</span> z3</span><br><span class="line">python scripts/mk_make.py --python</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h1 id="Z3语句"><a href="#Z3语句" class="headerlink" title="Z3语句"></a>Z3语句</h1><h2 id="Z3语句基础"><a href="#Z3语句基础" class="headerlink" title="Z3语句基础"></a>Z3语句基础</h2><p><img src= "/img/loading.gif" data-lazy-src="2020011601/yjjc.png"></p><h2 id="Z3语句讲解"><a href="#Z3语句讲解" class="headerlink" title="Z3语句讲解"></a>Z3语句讲解</h2><h3 id="Z3简单使用例子"><a href="#Z3简单使用例子" class="headerlink" title="Z3简单使用例子"></a>Z3简单使用例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">x = Int(<span class="string">&#x27;x&#x27;</span>)  <span class="comment">#声明未知数，类型是整数类型Int</span></span><br><span class="line">y = Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">solve(x &gt; <span class="number">2</span>, y &lt; <span class="number">10</span>, x + <span class="number">2</span>*y == <span class="number">7</span>)</span><br><span class="line"><span class="comment">#  输出   [y = 0, x = 7]</span></span><br></pre></td></tr></table></figure><p>先定义了两个未知数x和y，类型是Z3内置的整数类型Int<br>solve() 函数会创造一个 solver，然后对括号中的约束条件进行求解，在 Z3 默认情况下只会找到满足条件的一组解。</p><h3 id="声明未知数"><a href="#声明未知数" class="headerlink" title="声明未知数"></a>声明未知数</h3><ol><li>声明整数<code>x = Int(&#39;x&#39;)</code></li><li>声明实数<code>x = Real(&#39;x&#39;)</code></li><li>声明布尔类型<code>x = Bool(&#39;x&#39;)</code><br>批量声明未知数加s<br>例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = Reals(<span class="string">&#x27;a b c&#x27;</span>)  <span class="comment">#声明3个实数</span></span><br><span class="line">x, y, z = Ints(<span class="string">&#x27;x y z&#x27;</span>)   <span class="comment">#声明3个整数</span></span><br></pre></td></tr></table></figure>更改类型</li><li><code>IntVal()</code>  返回Z3整数</li><li><code>RealVal()</code>  返回Z3实数</li><li><code>RatVal()</code>   返回Z3有理数值<h3 id="simplify-函数—对表达式进行化简"><a href="#simplify-函数—对表达式进行化简" class="headerlink" title="simplify()函数—对表达式进行化简"></a>simplify()函数—对表达式进行化简</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>simplify(x + y + <span class="number">2</span>*x + <span class="number">3</span>)</span><br><span class="line"><span class="number">3</span> + <span class="number">3</span>*x + y </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; simplify(x &lt; y + x + <span class="number">2</span>)</span><br><span class="line">Not(y &lt;= -<span class="number">2</span>) </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; simplify(And(x + <span class="number">1</span> &gt;= <span class="number">3</span>, x**<span class="number">2</span> + x**<span class="number">2</span> + y**<span class="number">2</span> + <span class="number">2</span> &gt;= <span class="number">5</span>))</span><br><span class="line">And(x &gt;= <span class="number">2</span>, <span class="number">2</span>*x**<span class="number">2</span> + y**<span class="number">2</span> &gt;= <span class="number">3</span>) </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; simplify((x + <span class="number">1</span>)*(y + <span class="number">1</span>))</span><br><span class="line">(<span class="number">1</span> + x)*(<span class="number">1</span> + y) </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; simplify((x + <span class="number">1</span>)*(y + <span class="number">1</span>), som=<span class="literal">True</span>) <span class="comment"># sum-of-monomials： 单项式的和</span></span><br><span class="line"><span class="number">1</span> + x + y + x*y</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; t = simplify((x + y)**<span class="number">3</span>, som=<span class="literal">True</span>) </span><br><span class="line">&gt;&gt;&gt;&gt; t</span><br><span class="line">x*x*x + <span class="number">3</span>*x*x*y + <span class="number">3</span>*x*y*y + y*y*y</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; simplify(t, mul_to_power=<span class="literal">True</span>) <span class="comment"># mul_to_power 将乘法 转换成乘方</span></span><br><span class="line">x**<span class="number">3</span> + <span class="number">2</span>*y*x**<span class="number">2</span> + x**<span class="number">2</span>*y + <span class="number">3</span>*x*y**<span class="number">2</span> + y**<span class="number">3</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">simplify(&lt;表达式&gt;)  <span class="comment">#对表达式进行化简</span></span><br><span class="line">simplify(&lt;表达式&gt;,som=<span class="literal">True</span>)   <span class="comment">#sum-of-monomials： 单项式的和    将表达式转成单项式的和</span></span><br><span class="line">simplify(&lt;表达式&gt;,mul_to_power=<span class="literal">True</span>)   <span class="comment"># mul_to_power  将乘法转换为乘方</span></span><br></pre></td></tr></table></figure><p>simplify() 函数用于对表达式进行化简，同时可以设置一些选项来满足不同的要求。<br>更多选项使用 help_simplify() 获得。</p><h3 id="2-2-4-set-param-函数配置全局变量"><a href="#2-2-4-set-param-函数配置全局变量" class="headerlink" title="2.2.4. set_param()函数配置全局变量"></a>2.2.4. set_param()函数配置全局变量</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = Real(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = Real(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>solve(x**<span class="number">2</span> + y**<span class="number">2</span> == <span class="number">3</span>, x**<span class="number">3</span> == <span class="number">2</span>)</span><br><span class="line">[x = 1.2599210498?, y = -1.1885280594?]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set_param(precision=<span class="number">30</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>solve(x**<span class="number">2</span> + y**<span class="number">2</span> == <span class="number">3</span>, x**<span class="number">3</span> == <span class="number">2</span>)</span><br><span class="line">[x = 1.259921049894873164767210607278?, y = -1.188528059421316533710369365015?]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_param(precision=<span class="number">30</span>)  <span class="comment">#保留30位的小数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_param(rational_to_decimal=<span class="literal">True</span>) <span class="comment"># 以十进制形式表示有理数</span></span><br></pre></td></tr></table></figure><h3 id="Q-a-b-返回有理数-a-b"><a href="#Q-a-b-返回有理数-a-b" class="headerlink" title="Q(a, b) 返回有理数 a/b"></a>Q(a, b) 返回有理数 a/b</h3><p>Q(a, b) 返回有理数 a/b<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191227215601412.png" alt="在这里插入图片描述"></p><h3 id="solver类系列"><a href="#solver类系列" class="headerlink" title="solver类系列"></a>solver类系列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = Int(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Solver()</span><br><span class="line"><span class="comment">#创造一个通用solver</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(s)</span><br><span class="line"><span class="comment"># Solver 类</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27; <span class="title">Z3</span>. <span class="title">z3</span>. <span class="title">Solver</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">s</span>.<span class="title">add</span>(<span class="params">x&gt;<span class="number">10</span>,y==x+<span class="number">2</span></span>)  #添加约束到<span class="title">solver</span> 中</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">s</span></span></span><br><span class="line">[x&gt;10,y==x+2]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.check()   <span class="comment">#检查solver中的约束 是否满足</span></span><br><span class="line">sat   <span class="comment"># satisfiable/满足</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s. push( )   <span class="comment">#创建一个回溯点，即将当前栈的大小保存下来</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(y &lt; <span class="number">11</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">[x&gt;<span class="number">10</span>,y==x+<span class="number">2</span>，y&lt;<span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.check()</span><br><span class="line">unsat   <span class="comment"># unsatisfiable/不满足</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s. pop(num=<span class="number">1</span>)   <span class="comment">#回溯num个点</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">[x&gt;<span class="number">10</span>，y==X+<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s. check()</span><br><span class="line">sat</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> C <span class="keyword">in</span> s.assertions():</span><br><span class="line"><span class="comment"># assertions() 返回一个包含所有约束的AstVector</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s. statistics( )</span><br><span class="line"><span class="comment"># statistics() 返回最后一个check() 的统计信息</span></span><br><span class="line">(   :<span class="built_in">max</span>- memory     <span class="number">6.26</span></span><br><span class="line">    :memory           <span class="number">4.37</span></span><br><span class="line">    :mk -<span class="built_in">bool</span> -var     <span class="number">1</span></span><br><span class="line">    :num- al locs    <span class="number">331960806</span></span><br><span class="line">    :rlimit-count <span class="number">7016</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = s.model( )   <span class="comment"># model() 返回最后一个check() 的model</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(m)   <span class="comment"># ModelRef 类</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27; <span class="title">Z3</span>. <span class="title">z3</span>. <span class="title">ModelRef</span> &#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">m</span></span></span><br><span class="line">[x=11,y=13]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> d <span class="keyword">in</span> m.dec1s():   <span class="comment"># decls()返回model包含了所有符号的列表</span></span><br><span class="line">print(<span class="string">&quot;%S = %S&quot;</span> % (d.name()，m[d]))</span><br><span class="line">x=<span class="number">11</span></span><br><span class="line">y =<span class="number">13</span></span><br></pre></td></tr></table></figure><h2 id="Z3约束器使用流程"><a href="#Z3约束器使用流程" class="headerlink" title="Z3约束器使用流程"></a>Z3约束器使用流程</h2><ol><li>创建变量<br>例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = Int(<span class="string">&#x27;x&#x27;</span>) </span><br><span class="line">y = Int(<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>创建solver求解器<br>例：<code>s = Solver()</code></li><li>添加约束条件<br>例：<code>s.add(x+y==10)</code></li><li>检查solver中的约束是否满足<br>例：<code>s.check()</code></li><li>利用model()输出运算结果<br>例：<code>s.model()</code></li></ol><h1 id="Z3-example"><a href="#Z3-example" class="headerlink" title="Z3-example"></a>Z3-example</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">v2=[<span class="number">18564</span>, <span class="number">37316</span>, <span class="number">32053</span>, <span class="number">33278</span>, <span class="number">23993</span>, <span class="number">33151</span>,</span><br><span class="line">  <span class="number">15248</span>, <span class="number">13719</span>, <span class="number">34137</span>, <span class="number">27391</span>, <span class="number">28639</span>, <span class="number">18453</span>, <span class="number">28465</span>,</span><br><span class="line">  <span class="number">12384</span>, <span class="number">20780</span>, <span class="number">45085</span>, <span class="number">35827</span>, <span class="number">37243</span>, <span class="number">26037</span>, <span class="number">39409</span>,</span><br><span class="line">  <span class="number">17583</span>, <span class="number">20825</span>, <span class="number">44474</span>, <span class="number">35138</span>, <span class="number">36914</span>, <span class="number">25918</span>, <span class="number">38915</span>,</span><br><span class="line">  <span class="number">17672</span>, <span class="number">21219</span>, <span class="number">43935</span>, <span class="number">37072</span>, <span class="number">39359</span>, <span class="number">27793</span>, <span class="number">41447</span>,</span><br><span class="line">  <span class="number">18098</span>, <span class="number">21335</span>, <span class="number">46164</span>, <span class="number">38698</span>, <span class="number">39084</span>, <span class="number">29205</span>, <span class="number">40913</span>,</span><br><span class="line">  <span class="number">19117</span>, <span class="number">21786</span>, <span class="number">46573</span>, <span class="number">38322</span>, <span class="number">41017</span>, <span class="number">29298</span>, <span class="number">43409</span>,</span><br><span class="line">  <span class="number">19655</span>]</span><br><span class="line">s = Solver()<span class="comment">#设置一个解方程的类Solver(必须要设置）</span></span><br><span class="line">a1 = [<span class="number">0</span>]*<span class="number">49</span> <span class="comment">#设置的列表长度为49，从0到48，因为下面这个如果是空列表的话不能用索引</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>):</span><br><span class="line">    a1[i] = Int(<span class="string">&#x27;a1[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line"><span class="comment">#这里的3行  是设置未知量，都要设置，Int是设置int型的</span></span><br><span class="line">s.add(v2[<span class="number">0</span>] == <span class="number">34</span> * a1[<span class="number">3</span>] + <span class="number">12</span> * a1[<span class="number">0</span>] + <span class="number">53</span> * a1[<span class="number">1</span>] + <span class="number">6</span> * a1[<span class="number">2</span>] + <span class="number">58</span> * a1[<span class="number">4</span>] + <span class="number">36</span> * a1[<span class="number">5</span>] + a1[<span class="number">6</span>])</span><br><span class="line">s.add(v2[<span class="number">1</span>] == <span class="number">27</span> * a1[<span class="number">4</span>] + <span class="number">73</span> * a1[<span class="number">3</span>] + <span class="number">12</span> * a1[<span class="number">2</span>] + <span class="number">83</span> * a1[<span class="number">0</span>] + <span class="number">85</span> * a1[<span class="number">1</span>] + <span class="number">96</span> * a1[<span class="number">5</span>] + <span class="number">52</span> * a1[<span class="number">6</span>])</span><br><span class="line">s.add(v2[<span class="number">2</span>] == <span class="number">24</span> * a1[<span class="number">2</span>] + <span class="number">78</span> * a1[<span class="number">0</span>] + <span class="number">53</span> * a1[<span class="number">1</span>] + <span class="number">36</span> * a1[<span class="number">3</span>] + <span class="number">86</span> * a1[<span class="number">4</span>] + <span class="number">25</span> * a1[<span class="number">5</span>] + <span class="number">46</span> * a1[<span class="number">6</span>])</span><br><span class="line">s.add(v2[<span class="number">3</span>] == <span class="number">78</span> * a1[<span class="number">1</span>] + <span class="number">39</span> * a1[<span class="number">0</span>] + <span class="number">52</span> * a1[<span class="number">2</span>] + <span class="number">9</span> * a1[<span class="number">3</span>] + <span class="number">62</span> * a1[<span class="number">4</span>] + <span class="number">37</span> * a1[<span class="number">5</span>] + <span class="number">84</span> * a1[<span class="number">6</span>])</span><br><span class="line">s.add(v2[<span class="number">4</span>] == <span class="number">48</span> * a1[<span class="number">4</span>] + <span class="number">6</span> * a1[<span class="number">1</span>] + <span class="number">23</span> * a1[<span class="number">0</span>] + <span class="number">14</span> * a1[<span class="number">2</span>] + <span class="number">74</span> * a1[<span class="number">3</span>] + <span class="number">12</span> * a1[<span class="number">5</span>] + <span class="number">83</span> * a1[<span class="number">6</span>])</span><br><span class="line">s.add(v2[<span class="number">5</span>] == <span class="number">15</span> * a1[<span class="number">5</span>] + <span class="number">48</span> * a1[<span class="number">4</span>] + <span class="number">92</span> * a1[<span class="number">2</span>] + <span class="number">85</span> * a1[<span class="number">1</span>] + <span class="number">27</span> * a1[<span class="number">0</span>] + <span class="number">42</span> * a1[<span class="number">3</span>] + <span class="number">72</span> * a1[<span class="number">6</span>])</span><br><span class="line">s.add(v2[<span class="number">6</span>] == <span class="number">26</span> * a1[<span class="number">5</span>] + <span class="number">67</span> * a1[<span class="number">3</span>] + <span class="number">6</span> * a1[<span class="number">1</span>] + <span class="number">4</span> * a1[<span class="number">0</span>] + <span class="number">3</span> * a1[<span class="number">2</span>] + <span class="number">68</span> * a1[<span class="number">6</span>])</span><br><span class="line">s.add(v2[<span class="number">7</span>] == <span class="number">34</span> * a1[<span class="number">10</span>] + <span class="number">12</span> * a1[<span class="number">7</span>] + <span class="number">53</span> * a1[<span class="number">8</span>] + <span class="number">6</span> * a1[<span class="number">9</span>] + <span class="number">58</span> * a1[<span class="number">11</span>] + <span class="number">36</span> * a1[<span class="number">12</span>] + a1[<span class="number">13</span>])</span><br><span class="line">s.add(v2[<span class="number">8</span>] == <span class="number">27</span> * a1[<span class="number">11</span>] + <span class="number">73</span> * a1[<span class="number">10</span>] + <span class="number">12</span> * a1[<span class="number">9</span>] + <span class="number">83</span> * a1[<span class="number">7</span>] + <span class="number">85</span> * a1[<span class="number">8</span>] + <span class="number">96</span> * a1[<span class="number">12</span>] + <span class="number">52</span> * a1[<span class="number">13</span>])</span><br><span class="line">s.add(v2[<span class="number">9</span>] == <span class="number">24</span> * a1[<span class="number">9</span>] + <span class="number">78</span> * a1[<span class="number">7</span>] + <span class="number">53</span> * a1[<span class="number">8</span>] + <span class="number">36</span> * a1[<span class="number">10</span>] + <span class="number">86</span> * a1[<span class="number">11</span>] + <span class="number">25</span> * a1[<span class="number">12</span>] + <span class="number">46</span> * a1[<span class="number">13</span>])</span><br><span class="line">s.add(v2[<span class="number">10</span>] == <span class="number">78</span> * a1[<span class="number">8</span>] + <span class="number">39</span> * a1[<span class="number">7</span>] + <span class="number">52</span> * a1[<span class="number">9</span>] + <span class="number">9</span> * a1[<span class="number">10</span>] + <span class="number">62</span> * a1[<span class="number">11</span>] + <span class="number">37</span> * a1[<span class="number">12</span>] + <span class="number">84</span> * a1[<span class="number">13</span>])</span><br><span class="line">s.add(v2[<span class="number">11</span>] == <span class="number">48</span> * a1[<span class="number">11</span>] + <span class="number">6</span> * a1[<span class="number">8</span>] + <span class="number">23</span> * a1[<span class="number">7</span>] + <span class="number">14</span> * a1[<span class="number">9</span>] + <span class="number">74</span> * a1[<span class="number">10</span>] + <span class="number">12</span> * a1[<span class="number">12</span>] + <span class="number">83</span> * a1[<span class="number">13</span>])</span><br><span class="line">s.add(v2[<span class="number">12</span>] == <span class="number">15</span> * a1[<span class="number">12</span>] + <span class="number">48</span> * a1[<span class="number">11</span>] + <span class="number">92</span> * a1[<span class="number">9</span>] + <span class="number">85</span> * a1[<span class="number">8</span>] + <span class="number">27</span> * a1[<span class="number">7</span>] + <span class="number">42</span> * a1[<span class="number">10</span>] + <span class="number">72</span> * a1[<span class="number">13</span>])</span><br><span class="line">s.add(v2[<span class="number">13</span>] == <span class="number">26</span> * a1[<span class="number">12</span>] + <span class="number">67</span> * a1[<span class="number">10</span>] + <span class="number">6</span> * a1[<span class="number">8</span>] + <span class="number">4</span> * a1[<span class="number">7</span>] + <span class="number">3</span> * a1[<span class="number">9</span>] + <span class="number">68</span> * a1[<span class="number">13</span>])</span><br><span class="line">s.add(v2[<span class="number">14</span>] == <span class="number">34</span> * a1[<span class="number">17</span>] + <span class="number">12</span> * a1[<span class="number">14</span>] + <span class="number">53</span> * a1[<span class="number">15</span>] + <span class="number">6</span> * a1[<span class="number">16</span>] + <span class="number">58</span> * a1[<span class="number">18</span>] + <span class="number">36</span> * a1[<span class="number">19</span>] + a1[<span class="number">20</span>])</span><br><span class="line">s.add(v2[<span class="number">15</span>] == <span class="number">27</span> * a1[<span class="number">18</span>] + <span class="number">73</span> * a1[<span class="number">17</span>] + <span class="number">12</span> * a1[<span class="number">16</span>] + <span class="number">83</span> * a1[<span class="number">14</span>] + <span class="number">85</span> * a1[<span class="number">15</span>] + <span class="number">96</span> * a1[<span class="number">19</span>] + <span class="number">52</span> * a1[<span class="number">20</span>])</span><br><span class="line">s.add(v2[<span class="number">16</span>] == <span class="number">24</span> * a1[<span class="number">16</span>] + <span class="number">78</span> * a1[<span class="number">14</span>] + <span class="number">53</span> * a1[<span class="number">15</span>] + <span class="number">36</span> * a1[<span class="number">17</span>] + <span class="number">86</span> * a1[<span class="number">18</span>] + <span class="number">25</span> * a1[<span class="number">19</span>] + <span class="number">46</span> * a1[<span class="number">20</span>])</span><br><span class="line">s.add(v2[<span class="number">17</span>] == <span class="number">78</span> * a1[<span class="number">15</span>] + <span class="number">39</span> * a1[<span class="number">14</span>] + <span class="number">52</span> * a1[<span class="number">16</span>] + <span class="number">9</span> * a1[<span class="number">17</span>] + <span class="number">62</span> * a1[<span class="number">18</span>] + <span class="number">37</span> * a1[<span class="number">19</span>] + <span class="number">84</span> * a1[<span class="number">20</span>])</span><br><span class="line">s.add(v2[<span class="number">18</span>] == <span class="number">48</span> * a1[<span class="number">18</span>] + <span class="number">6</span> * a1[<span class="number">15</span>] + <span class="number">23</span> * a1[<span class="number">14</span>] + <span class="number">14</span> * a1[<span class="number">16</span>] + <span class="number">74</span> * a1[<span class="number">17</span>] + <span class="number">12</span> * a1[<span class="number">19</span>] + <span class="number">83</span> * a1[<span class="number">20</span>])</span><br><span class="line">s.add(v2[<span class="number">19</span>] == <span class="number">15</span> * a1[<span class="number">19</span>] + <span class="number">48</span> * a1[<span class="number">18</span>] + <span class="number">92</span> * a1[<span class="number">16</span>] + <span class="number">85</span> * a1[<span class="number">15</span>] + <span class="number">27</span> * a1[<span class="number">14</span>] + <span class="number">42</span> * a1[<span class="number">17</span>] + <span class="number">72</span> * a1[<span class="number">20</span>])</span><br><span class="line">s.add(v2[<span class="number">20</span>] == <span class="number">26</span> * a1[<span class="number">19</span>] + <span class="number">67</span> * a1[<span class="number">17</span>] + <span class="number">6</span> * a1[<span class="number">15</span>] + <span class="number">4</span> * a1[<span class="number">14</span>] + <span class="number">3</span> * a1[<span class="number">16</span>] + <span class="number">68</span> * a1[<span class="number">20</span>])</span><br><span class="line">s.add(v2[<span class="number">21</span>] == <span class="number">34</span> * a1[<span class="number">24</span>] + <span class="number">12</span> * a1[<span class="number">21</span>] + <span class="number">53</span> * a1[<span class="number">22</span>] + <span class="number">6</span> * a1[<span class="number">23</span>] + <span class="number">58</span> * a1[<span class="number">25</span>] + <span class="number">36</span> * a1[<span class="number">26</span>] + a1[<span class="number">27</span>])</span><br><span class="line">s.add(v2[<span class="number">22</span>] == <span class="number">27</span> * a1[<span class="number">25</span>] + <span class="number">73</span> * a1[<span class="number">24</span>] + <span class="number">12</span> * a1[<span class="number">23</span>] + <span class="number">83</span> * a1[<span class="number">21</span>] + <span class="number">85</span> * a1[<span class="number">22</span>] + <span class="number">96</span> * a1[<span class="number">26</span>] + <span class="number">52</span> * a1[<span class="number">27</span>])</span><br><span class="line">s.add(v2[<span class="number">23</span>] == <span class="number">24</span> * a1[<span class="number">23</span>] + <span class="number">78</span> * a1[<span class="number">21</span>] + <span class="number">53</span> * a1[<span class="number">22</span>] + <span class="number">36</span> * a1[<span class="number">24</span>] + <span class="number">86</span> * a1[<span class="number">25</span>] + <span class="number">25</span> * a1[<span class="number">26</span>] + <span class="number">46</span> * a1[<span class="number">27</span>])</span><br><span class="line">s.add(v2[<span class="number">24</span>] == <span class="number">78</span> * a1[<span class="number">22</span>] + <span class="number">39</span> * a1[<span class="number">21</span>] + <span class="number">52</span> * a1[<span class="number">23</span>] + <span class="number">9</span> * a1[<span class="number">24</span>] + <span class="number">62</span> * a1[<span class="number">25</span>] + <span class="number">37</span> * a1[<span class="number">26</span>] + <span class="number">84</span> * a1[<span class="number">27</span>])</span><br><span class="line">s.add(v2[<span class="number">25</span>] == <span class="number">48</span> * a1[<span class="number">25</span>] + <span class="number">6</span> * a1[<span class="number">22</span>] + <span class="number">23</span> * a1[<span class="number">21</span>] + <span class="number">14</span> * a1[<span class="number">23</span>] + <span class="number">74</span> * a1[<span class="number">24</span>] + <span class="number">12</span> * a1[<span class="number">26</span>] + <span class="number">83</span> * a1[<span class="number">27</span>])</span><br><span class="line">s.add(v2[<span class="number">26</span>] == <span class="number">15</span> * a1[<span class="number">26</span>] + <span class="number">48</span> * a1[<span class="number">25</span>] + <span class="number">92</span> * a1[<span class="number">23</span>] + <span class="number">85</span> * a1[<span class="number">22</span>] + <span class="number">27</span> * a1[<span class="number">21</span>] + <span class="number">42</span> * a1[<span class="number">24</span>] + <span class="number">72</span> * a1[<span class="number">27</span>])</span><br><span class="line">s.add(v2[<span class="number">27</span>] == <span class="number">26</span> * a1[<span class="number">26</span>] + <span class="number">67</span> * a1[<span class="number">24</span>] + <span class="number">6</span> * a1[<span class="number">22</span>] + <span class="number">4</span> * a1[<span class="number">21</span>] + <span class="number">3</span> * a1[<span class="number">23</span>] + <span class="number">68</span> * a1[<span class="number">27</span>])</span><br><span class="line">s.add(v2[<span class="number">28</span>] == <span class="number">34</span> * a1[<span class="number">31</span>] + <span class="number">12</span> * a1[<span class="number">28</span>] + <span class="number">53</span> * a1[<span class="number">29</span>] + <span class="number">6</span> * a1[<span class="number">30</span>] + <span class="number">58</span> * a1[<span class="number">32</span>] + <span class="number">36</span> * a1[<span class="number">33</span>] + a1[<span class="number">34</span>])</span><br><span class="line">s.add(v2[<span class="number">29</span>] == <span class="number">27</span> * a1[<span class="number">32</span>] + <span class="number">73</span> * a1[<span class="number">31</span>] + <span class="number">12</span> * a1[<span class="number">30</span>] + <span class="number">83</span> * a1[<span class="number">28</span>] + <span class="number">85</span> * a1[<span class="number">29</span>] + <span class="number">96</span> * a1[<span class="number">33</span>] + <span class="number">52</span> * a1[<span class="number">34</span>])</span><br><span class="line">s.add(v2[<span class="number">30</span>] == <span class="number">24</span> * a1[<span class="number">30</span>] + <span class="number">78</span> * a1[<span class="number">28</span>] + <span class="number">53</span> * a1[<span class="number">29</span>] + <span class="number">36</span> * a1[<span class="number">31</span>] + <span class="number">86</span> * a1[<span class="number">32</span>] + <span class="number">25</span> * a1[<span class="number">33</span>] + <span class="number">46</span> * a1[<span class="number">34</span>])</span><br><span class="line">s.add(v2[<span class="number">31</span>] == <span class="number">78</span> * a1[<span class="number">29</span>] + <span class="number">39</span> * a1[<span class="number">28</span>] + <span class="number">52</span> * a1[<span class="number">30</span>] + <span class="number">9</span> * a1[<span class="number">31</span>] + <span class="number">62</span> * a1[<span class="number">32</span>] + <span class="number">37</span> * a1[<span class="number">33</span>] + <span class="number">84</span> * a1[<span class="number">34</span>])</span><br><span class="line">s.add(v2[<span class="number">32</span>] == <span class="number">48</span> * a1[<span class="number">32</span>] + <span class="number">6</span> * a1[<span class="number">29</span>] + <span class="number">23</span> * a1[<span class="number">28</span>] + <span class="number">14</span> * a1[<span class="number">30</span>] + <span class="number">74</span> * a1[<span class="number">31</span>] + <span class="number">12</span> * a1[<span class="number">33</span>] + <span class="number">83</span> * a1[<span class="number">34</span>])</span><br><span class="line">s.add(v2[<span class="number">33</span>] == <span class="number">15</span> * a1[<span class="number">33</span>] + <span class="number">48</span> * a1[<span class="number">32</span>] + <span class="number">92</span> * a1[<span class="number">30</span>] + <span class="number">85</span> * a1[<span class="number">29</span>] + <span class="number">27</span> * a1[<span class="number">28</span>] + <span class="number">42</span> * a1[<span class="number">31</span>] + <span class="number">72</span> * a1[<span class="number">34</span>])</span><br><span class="line">s.add(v2[<span class="number">34</span>] == <span class="number">26</span> * a1[<span class="number">33</span>] + <span class="number">67</span> * a1[<span class="number">31</span>] + <span class="number">6</span> * a1[<span class="number">29</span>] + <span class="number">4</span> * a1[<span class="number">28</span>] + <span class="number">3</span> * a1[<span class="number">30</span>] + <span class="number">68</span> * a1[<span class="number">34</span>])</span><br><span class="line">s.add(v2[<span class="number">35</span>] == <span class="number">34</span> * a1[<span class="number">38</span>] + <span class="number">12</span> * a1[<span class="number">35</span>] + <span class="number">53</span> * a1[<span class="number">36</span>] + <span class="number">6</span> * a1[<span class="number">37</span>] + <span class="number">58</span> * a1[<span class="number">39</span>] + <span class="number">36</span> * a1[<span class="number">40</span>] + a1[<span class="number">41</span>])</span><br><span class="line">s.add(v2[<span class="number">36</span>] == <span class="number">27</span> * a1[<span class="number">39</span>] + <span class="number">73</span> * a1[<span class="number">38</span>] + <span class="number">12</span> * a1[<span class="number">37</span>] + <span class="number">83</span> * a1[<span class="number">35</span>] + <span class="number">85</span> * a1[<span class="number">36</span>] + <span class="number">96</span> * a1[<span class="number">40</span>] + <span class="number">52</span> * a1[<span class="number">41</span>])</span><br><span class="line">s.add(v2[<span class="number">37</span>] == <span class="number">24</span> * a1[<span class="number">37</span>] + <span class="number">78</span> * a1[<span class="number">35</span>] + <span class="number">53</span> * a1[<span class="number">36</span>] + <span class="number">36</span> * a1[<span class="number">38</span>] + <span class="number">86</span> * a1[<span class="number">39</span>] + <span class="number">25</span> * a1[<span class="number">40</span>] + <span class="number">46</span> * a1[<span class="number">41</span>])</span><br><span class="line">s.add(v2[<span class="number">38</span>] == <span class="number">78</span> * a1[<span class="number">36</span>] + <span class="number">39</span> * a1[<span class="number">35</span>] + <span class="number">52</span> * a1[<span class="number">37</span>] + <span class="number">9</span> * a1[<span class="number">38</span>] + <span class="number">62</span> * a1[<span class="number">39</span>] + <span class="number">37</span> * a1[<span class="number">40</span>] + <span class="number">84</span> * a1[<span class="number">41</span>])</span><br><span class="line">s.add(v2[<span class="number">39</span>] == <span class="number">48</span> * a1[<span class="number">39</span>] + <span class="number">6</span> * a1[<span class="number">36</span>] + <span class="number">23</span> * a1[<span class="number">35</span>] + <span class="number">14</span> * a1[<span class="number">37</span>] + <span class="number">74</span> * a1[<span class="number">38</span>] + <span class="number">12</span> * a1[<span class="number">40</span>] + <span class="number">83</span> * a1[<span class="number">41</span>])</span><br><span class="line">s.add(v2[<span class="number">40</span>] == <span class="number">15</span> * a1[<span class="number">40</span>] + <span class="number">48</span> * a1[<span class="number">39</span>] + <span class="number">92</span> * a1[<span class="number">37</span>] + <span class="number">85</span> * a1[<span class="number">36</span>] + <span class="number">27</span> * a1[<span class="number">35</span>] + <span class="number">42</span> * a1[<span class="number">38</span>] + <span class="number">72</span> * a1[<span class="number">41</span>])</span><br><span class="line">s.add(v2[<span class="number">41</span>] == <span class="number">26</span> * a1[<span class="number">40</span>] + <span class="number">67</span> * a1[<span class="number">38</span>] + <span class="number">6</span> * a1[<span class="number">36</span>] + <span class="number">4</span> * a1[<span class="number">35</span>] + <span class="number">3</span> * a1[<span class="number">37</span>] + <span class="number">68</span> * a1[<span class="number">41</span>])</span><br><span class="line">s.add(v2[<span class="number">42</span>] == <span class="number">34</span> * a1[<span class="number">45</span>] + <span class="number">12</span> * a1[<span class="number">42</span>] + <span class="number">53</span> * a1[<span class="number">43</span>] + <span class="number">6</span> * a1[<span class="number">44</span>] + <span class="number">58</span> * a1[<span class="number">46</span>] + <span class="number">36</span> * a1[<span class="number">47</span>] + a1[<span class="number">48</span>])</span><br><span class="line">s.add(v2[<span class="number">43</span>] == <span class="number">27</span> * a1[<span class="number">46</span>] + <span class="number">73</span> * a1[<span class="number">45</span>] + <span class="number">12</span> * a1[<span class="number">44</span>] + <span class="number">83</span> * a1[<span class="number">42</span>] + <span class="number">85</span> * a1[<span class="number">43</span>] + <span class="number">96</span> * a1[<span class="number">47</span>] + <span class="number">52</span> * a1[<span class="number">48</span>])</span><br><span class="line">s.add(v2[<span class="number">44</span>] == <span class="number">24</span> * a1[<span class="number">44</span>] + <span class="number">78</span> * a1[<span class="number">42</span>] + <span class="number">53</span> * a1[<span class="number">43</span>] + <span class="number">36</span> * a1[<span class="number">45</span>] + <span class="number">86</span> * a1[<span class="number">46</span>] + <span class="number">25</span> * a1[<span class="number">47</span>] + <span class="number">46</span> * a1[<span class="number">48</span>])</span><br><span class="line">s.add(v2[<span class="number">45</span>] == <span class="number">78</span> * a1[<span class="number">43</span>] + <span class="number">39</span> * a1[<span class="number">42</span>] + <span class="number">52</span> * a1[<span class="number">44</span>] + <span class="number">9</span> * a1[<span class="number">45</span>] + <span class="number">62</span> * a1[<span class="number">46</span>] + <span class="number">37</span> * a1[<span class="number">47</span>] + <span class="number">84</span> * a1[<span class="number">48</span>])</span><br><span class="line">s.add(v2[<span class="number">46</span>] == <span class="number">48</span> * a1[<span class="number">46</span>] + <span class="number">6</span> * a1[<span class="number">43</span>] + <span class="number">23</span> * a1[<span class="number">42</span>] + <span class="number">14</span> * a1[<span class="number">44</span>] + <span class="number">74</span> * a1[<span class="number">45</span>] + <span class="number">12</span> * a1[<span class="number">47</span>] + <span class="number">83</span> * a1[<span class="number">48</span>])</span><br><span class="line">s.add(v2[<span class="number">47</span>] == <span class="number">15</span> * a1[<span class="number">47</span>] + <span class="number">48</span> * a1[<span class="number">46</span>] + <span class="number">92</span> * a1[<span class="number">44</span>] + <span class="number">85</span> * a1[<span class="number">43</span>] + <span class="number">27</span> * a1[<span class="number">42</span>] + <span class="number">42</span> * a1[<span class="number">45</span>] + <span class="number">72</span> * a1[<span class="number">48</span>])</span><br><span class="line">s.add(v2[<span class="number">48</span>] == <span class="number">26</span> * a1[<span class="number">47</span>] + <span class="number">67</span> * a1[<span class="number">45</span>] + <span class="number">6</span> * a1[<span class="number">43</span>] + <span class="number">4</span> * a1[<span class="number">42</span>] + <span class="number">3</span> * a1[<span class="number">44</span>] + <span class="number">68</span> * a1[<span class="number">48</span>])</span><br><span class="line"><span class="comment">#add是添加约束条件</span></span><br><span class="line">print(s.check())<span class="comment">#check是保证有解</span></span><br><span class="line">answer=s.model()<span class="comment">#model是输出运算结果</span></span><br><span class="line">print(answer)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><ol><li><a href="https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/">Z3 API IN PYTHON 中文文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Z3安装&quot;&gt;&lt;a href=&quot;#Z3安装&quot; class=&quot;headerlink&quot; title=&quot;Z3安装&quot;&gt;&lt;/a&gt;Z3安装&lt;/h1&gt;&lt;p&gt;linux安装Z3&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="ctf-re" scheme="https://Forgo7ten.github.io/categories/ctf-re/"/>
    
      <category term="re学习" scheme="https://Forgo7ten.github.io/categories/ctf-re/re%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="工具/python库使用" scheme="https://Forgo7ten.github.io/categories/ctf-re/re%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E5%85%B7-python%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="ctf-re" scheme="https://Forgo7ten.github.io/tags/ctf-re/"/>
    
      <category term="工具/python库使用" scheme="https://Forgo7ten.github.io/tags/%E5%B7%A5%E5%85%B7-python%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Base16,Base32,Base64编码详细学习</title>
    <link href="https://forgo7ten.github.io/2020/01/15/2020011501/"/>
    <id>https://forgo7ten.github.io/2020/01/15/2020011501/</id>
    <published>2020-01-15T11:13:05.000Z</published>
    <updated>2020-01-15T11:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Base编码"><a href="#Base编码" class="headerlink" title="Base编码"></a>Base编码</h1><h2 id="Base16编码"><a href="#Base16编码" class="headerlink" title="Base16编码"></a>Base16编码</h2><h3 id="Base16编码表格"><a href="#Base16编码表格" class="headerlink" title="Base16编码表格"></a>Base16编码表格</h3><p>Base16字符表：<code>0123456789ABCDEF</code><br><img src= "/img/loading.gif" data-lazy-src="2020011501/base16.png"></p><h3 id="Base16编码方式"><a href="#Base16编码方式" class="headerlink" title="Base16编码方式"></a>Base16编码方式</h3><ol><li>将数据(根据ASCII编码,UTF-8编码等)转成对应的二进制数</li><li>然后将所有的二进制全部串起来，4个二进制位为一组，转化成对应十进制数。</li><li>根据十进制数值找到Base16编码表里面对应的字符</li></ol><p>base16是4个比特位表示一个字符，原码是1个字节（8个比特位）表示一个字符，也就是说原先如果使用ASCII编码后的一个字符，现在转化成两个字符。数据量是原先的2倍。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191218201844154.png" alt="在这里插入图片描述"><br>也就是<em>LOVE</em>加密后是<em>4C4F5645</em></p><h3 id="Base16伪代码-实际环境"><a href="#Base16伪代码-实际环境" class="headerlink" title="Base16伪代码|实际环境"></a>Base16伪代码|实际环境</h3><p>待补充</p><h2 id="Base32编码"><a href="#Base32编码" class="headerlink" title="Base32编码"></a>Base32编码</h2><h3 id="Base32编码表格"><a href="#Base32编码表格" class="headerlink" title="Base32编码表格"></a>Base32编码表格</h3><p>Base32字符表：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZ234567</code><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/201912182031120.png" alt="在这里插入图片描述"></p><h3 id="Base32编码方式"><a href="#Base32编码方式" class="headerlink" title="Base32编码方式"></a>Base32编码方式</h3><ol><li>将数据(根据ASCII编码,UTF-8编码等)转成对应的二进制数</li><li>然后将所有的二进制全部串起来，5个二进制位为一组，若不足5位则低位补0，转化成对应十进制数。</li><li>若不足40位，则补”=”<br> 一个”=”相当于5位，补满40位为止。</li></ol><p>例：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191218210335864.png" alt="在这里插入图片描述"><br>最后01不足5位，低位补全0。补为<em>01000</em>，也就是8<br>然后这才35位，需要末尾补一个”=”<br>所以<em>LOVE</em>用Base32编码后得到<em>JRHVMRI\</em></p><p>base32 结尾可能会有 <code>=</code> 号，但最多有 6 个</p><h3 id="Base32伪代码-实际环境"><a href="#Base32伪代码-实际环境" class="headerlink" title="Base32伪代码|实际环境"></a>Base32伪代码|实际环境</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v28 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v25 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v30 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*(_BYTE *)(v6 + v2) )               <span class="comment">// v2为字符串首地址，v6为0开始遍历</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ++v6;</span><br><span class="line">      v5 += <span class="number">8</span>;</span><br><span class="line">      ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v6 &lt; v30 );                         <span class="comment">// 循环完，v5为将所有字符转换为二进制位、的位数</span></span><br><span class="line">                                                <span class="comment">// </span></span><br><span class="line">    v28 = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> ( v5 % <span class="number">40</span> )                            <span class="comment">// 这里对位数是否能整除40做判断，来判断是否添加&#x27;=&#x27;</span></span><br><span class="line">                                                <span class="comment">// v4等于多少就添加几个&#x27;=&#x27;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8u</span>:</span><br><span class="line">      v4 = <span class="number">6</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">16u</span>:</span><br><span class="line">      v4 = <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">24u</span>:</span><br><span class="line">      v4 = <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">32u</span>:</span><br><span class="line">      v4 = <span class="number">1</span>;</span><br><span class="line">LABEL_10:</span><br><span class="line">      v25 = v4;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v29 = (<span class="number">8</span> * v3 + <span class="number">4</span>) / <span class="number">5</span>;                       <span class="comment">// 除以5，算一下转换后数据个数</span></span><br><span class="line">                                                <span class="comment">// +4的原因是，向上取整，让余数也算一个数据</span></span><br></pre></td></tr></table></figure><h2 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h2><h3 id="Base64编码表格"><a href="#Base64编码表格" class="headerlink" title="Base64编码表格"></a>Base64编码表格</h3><p>使用了ASCII编码中64个可打印的字符(大写字母A ~ Z,小写字母a ~ z,数字0~9以及”+”,”/“)<br>Base64字符表：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191218210834868.png" alt="在这里插入图片描述"></p><h3 id="Base64编码方式"><a href="#Base64编码方式" class="headerlink" title="Base64编码方式"></a>Base64编码方式</h3><ol><li><p>将数据(根据ASCII编码,UTF-8编码等)转成对应的二进制数</p></li><li><p>然后将所有的二进制全部串起来，6个二进制位为一组，若不足6位则低位补0，转化成对应十进制数。</p></li><li><p>若不足24位，则补”=”<br> 一个”=”想当于6个二进制位。<br>例：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191218212504346.png" alt="在这里插入图片描述"><br>最后只有4位，低位补全0，则为<em>111100</em><br>然后3*6=18 不足24位，加上一个”=”</p></li></ol><p><em>LO</em>加密后是<em>TE8\</em></p><p>base64 结尾可能会有 <code>=</code> 号，但最多有 2 个</p><h3 id="Base64伪代码-实际环境"><a href="#Base64伪代码-实际环境" class="headerlink" title="Base64伪代码|实际环境"></a>Base64伪代码|实际环境</h3><p>当函数头是这种时候，大概率是Base64加密，然后根据字符集来确认<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019121821311285.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191225172334626.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200111213239645.png" alt="在这里插入图片描述"></p><h3 id="Base64url-编码"><a href="#Base64url-编码" class="headerlink" title="Base64url 编码"></a>Base64url 编码</h3><p>字符表中的  ‘+’  →  ‘-‘  ，  ‘/‘  →  ‘_’</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src= "/img/loading.gif" data-lazy-src="2020011501/zongjie.png"></p><h1 id="Base加解密-Python实现"><a href="#Base加解密-Python实现" class="headerlink" title="Base加解密|Python实现"></a>Base加解密|Python实现</h1><h2 id="Base16加解密实现"><a href="#Base16加解密实现" class="headerlink" title="Base16加解密实现"></a>Base16加解密实现</h2><h3 id="Base16加解密（原始字符表）"><a href="#Base16加解密（原始字符表）" class="headerlink" title="Base16加解密（原始字符表）"></a>Base16加解密（原始字符表）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">original = <span class="string">&#x27;wo tai nan le&#x27;</span></span><br><span class="line">print(<span class="string">&quot;1  original:  &quot;</span>,<span class="built_in">type</span>(original),original)</span><br><span class="line">print(<span class="string">&quot;2  original.encode(&#x27;utf-8&#x27;):  &quot;</span>,<span class="built_in">type</span>(original.encode(<span class="string">&#x27;utf-8&#x27;</span>)),original.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">str_encode = base64.b16encode(original.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(<span class="string">&quot;3  str_encode:  &quot;</span>,<span class="built_in">type</span>(str_encode),str_encode)</span><br><span class="line">print(<span class="string">&quot;4  str(str_encode,&#x27;utf-8&#x27;):  &quot;</span>,<span class="built_in">type</span>(<span class="built_in">str</span>(str_encode,<span class="string">&#x27;utf-8&#x27;</span>)),<span class="built_in">str</span>(str_encode,<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">str_decode = base64.b16decode(str_encode)</span><br><span class="line">print(<span class="string">&quot;5  str_decode:  &quot;</span>,<span class="built_in">type</span>(str_decode),str_decode)</span><br><span class="line">print(<span class="built_in">str</span>(str_decode,<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>输出结果为<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191219170829198.png" alt="在这里插入图片描述"><br>关键代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base64.b16encode(&lt;<span class="string">&#x27;bytes&#x27;</span>&gt;)  <span class="comment">#base16编码</span></span><br><span class="line">base64.b16decode(&lt;<span class="string">&#x27;bytes&#x27;</span>&gt;)  <span class="comment">#base16解码</span></span><br></pre></td></tr></table></figure><p>可以知道，在python3.7中<br>base64.b<em>16</em>encode(X)  其中需要加密的类型为’<em>bytes</em>‘<br>（其中<em>16</em>可自行替换为16 32 64）<br>同时，加密后的类型也为’<em>bytes</em>‘类型</p><p>所以加密的时候需要<strong>将 <em>str</em> 类型先转换为 <em>bytes</em> 类型：</strong><br>例如：origin是一个 <em>str</em> 类型，则<code>origin.encode(&#39;utf-8&#39;)</code>则为 <em>bytes</em> 类型</p><p>而<strong>将 <em>bytes</em> 类型先转换为 <em>str</em> 类型：</strong><br>代码：<code>str(origin,&#39;utf-8&#39;)</code>其中origin是需要转换的 <em>bytes</em> 类型数据</p><h3 id="Base16加解密（自定义字符表）"><a href="#Base16加解密（自定义字符表）" class="headerlink" title="Base16加解密（自定义字符表）"></a>Base16加解密（自定义字符表）</h3><p>Base16的原始字符表为：<code>0123456789ABCDEF</code><br>倘若我们替换成<code>abcdef0123456789</code><br>用到两个方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.maketrans(intab, outtab)  //用于创建字符映射的转换表</span><br><span class="line">intab -- 字符串中被替代的字符组成的字符串。</span><br><span class="line">outtab -- 用来替换的字符串。</span><br><span class="line">后者替换前者</span><br><span class="line"><span class="comment">#第三个参数此处不讨论</span></span><br><span class="line">此处的<span class="built_in">str</span>不可改</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.translate(table[, deletechars])  //根据参数table给出的表转换字符串的字符</span><br><span class="line">table -- 翻译表，翻译表是通过maketrans方法转换而来。</span><br><span class="line">deletechars -- 字符串中要过滤的字符列表。<span class="comment">#第二个参数此处不讨论</span></span><br><span class="line">此处的<span class="built_in">str</span>为需要转换的字符串，自行根据自己字符串取的名称进行更换</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">intab = <span class="string">&quot;like&quot;</span></span><br><span class="line">outtab = <span class="string">&quot;love&quot;</span></span><br><span class="line">biao = <span class="built_in">str</span>.maketrans(intab, outtab)</span><br><span class="line">origin = <span class="string">&quot;I like you&quot;</span></span><br><span class="line">print(origin.translate(biao))</span><br></pre></td></tr></table></figure><p>输出<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191219173824799.png" alt="在这里插入图片描述"><br><strong>加解密实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">origin = <span class="string">&#x27;wo tai nan le!!&#x27;</span></span><br><span class="line">biao1 = <span class="built_in">str</span>.maketrans(<span class="string">&quot;0123456789ABCDEF&quot;</span>,<span class="string">&quot;abcdef0123456789&quot;</span>)</span><br><span class="line">str_encode = base64.b16encode(origin.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">encode = <span class="built_in">str</span>(str_encode,<span class="string">&#x27;utf-8&#x27;</span>).translate(biao1)</span><br><span class="line">print(encode)</span><br><span class="line">biao2 = <span class="built_in">str</span>.maketrans(<span class="string">&quot;abcdef0123456789&quot;</span>,<span class="string">&quot;0123456789ABCDEF&quot;</span>)</span><br><span class="line">str_decode = base64.b16decode(encode.translate(biao2).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(<span class="built_in">str</span>(str_decode,<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1109ca1e0b03ca080b08ca060fcbcb</span><br><span class="line">wo tai nan le!!</span><br></pre></td></tr></table></figure><h2 id="Base32加解密实现"><a href="#Base32加解密实现" class="headerlink" title="Base32加解密实现"></a>Base32加解密实现</h2><p>同Base16加解密，将b16改为b32即可</p><h2 id="Base64加解密实现"><a href="#Base64加解密实现" class="headerlink" title="Base64加解密实现"></a>Base64加解密实现</h2><p>同Base16加解密，将b16改为b64即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Base编码&quot;&gt;&lt;a href=&quot;#Base编码&quot; class=&quot;headerlink&quot; title=&quot;Base编码&quot;&gt;&lt;/a&gt;Base编码&lt;/h1&gt;&lt;h2 id=&quot;Base16编码&quot;&gt;&lt;a href=&quot;#Base16编码&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="ctf-re" scheme="https://Forgo7ten.github.io/categories/ctf-re/"/>
    
      <category term="re学习" scheme="https://Forgo7ten.github.io/categories/ctf-re/re%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="加密算法" scheme="https://Forgo7ten.github.io/categories/ctf-re/re%E5%AD%A6%E4%B9%A0/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ctf-re" scheme="https://Forgo7ten.github.io/tags/ctf-re/"/>
    
      <category term="加密算法" scheme="https://Forgo7ten.github.io/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ctf-re-脱壳技术学习</title>
    <link href="https://forgo7ten.github.io/2020/01/13/2020011301/"/>
    <id>https://forgo7ten.github.io/2020/01/13/2020011301/</id>
    <published>2020-01-13T08:19:30.000Z</published>
    <updated>2020-01-13T08:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="壳的概念学习"><a href="#壳的概念学习" class="headerlink" title="壳的概念学习"></a>壳的概念学习</h1><h2 id="壳的概念"><a href="#壳的概念" class="headerlink" title="壳的概念"></a>壳的概念</h2><p>壳是在一些计算机软件里也有一段专门负责保护软件不被非法修改或反编译的程序。<br>壳是在一个程序的外面再包裹上另外一段代码，保护里面的代码不被非法修改或反编译的程序。它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。</p><h2 id="壳的分类"><a href="#壳的分类" class="headerlink" title="壳的分类"></a>壳的分类</h2><p>壳分为两类：<strong>压缩壳</strong>和<strong>加密壳</strong></p><ol><li>压缩壳<br>使用压缩壳可以帮助缩减 PE 文件的大小，隐藏了 PE 文件内部代码和资源，便于网络传输和保存。<br>压缩壳用途：<pre><code>1. 单纯用于压缩普通 PE 文件的压缩壳2. 对源文件进行较大变形，严重破坏 PE 文件头，经常用于压缩恶意程序。</code></pre>常见的压缩壳<pre><code>- UPX- ASpack- PECompat</code></pre><ol start="2"><li>加密壳<br>功能：保护 PE 免受代码逆向分析<br>用途：<ol><li>对安全性要求高，对破解敏感的应用程序</li><li>恶意程序用于避免（降低）杀毒软件的检测查杀<br>常见的加密壳：</li></ol><ul><li>ASProtector</li><li>Armadillo</li><li>EXECryptor</li><li>Themida</li><li>VMProtect<h2 id="壳的加载过程"><a href="#壳的加载过程" class="headerlink" title="壳的加载过程"></a>壳的加载过程</h2></li></ul></li><li>保存入口参数<ol><li>加壳程序初始化时保存各寄存器的值</li><li>外壳执行完毕，恢复各寄存器值</li><li>最后再跳到原程序执行<br>通常使用```pushad / popad、pushfd / popfd````指令对寄存器进行保存和恢复</li></ol></li><li>获取所需函数API<ol><li>一般壳的输入表中只有 GetProcAddress、GetModuleHandle 和 LoadLibrary 这几个 API 函数</li><li>如果需要其他 API 函数，则通过 LoadLibraryA(W) 或 LoadLibraryExA(W) 将 DLL 文件映射到调用进程的地址空间中</li><li>如果 DLL 文件已被映射到调用进程的地址空间里，就可以调用 GetModuleHandleA(W) 函数获得 DLL 模块句柄</li><li>一旦 DLL 模块被加载，就可以调用 GetProcAddress 函数获取输入函数的地址</li></ol></li><li>跳转回原程序入口点（OEP）<ol><li>在跳转回入口点之前，恢复填写原PE文件输入表（IAT），并处理好重定位项（主要是 DLL 文件）</li><li>对每一个 DLL 引入的所有函数重新获取地址，并填写到 IAT 表中（因为加壳时外壳自己构造了一个输入表）</li><li>将控制权移交原程序，并继续执行</li></ol></li></ol></li></ol><h1 id="脱壳七法"><a href="#脱壳七法" class="headerlink" title="脱壳七法"></a>脱壳七法</h1><h2 id="ESP定律"><a href="#ESP定律" class="headerlink" title="ESP定律"></a>ESP定律</h2><p>使用条件：OD载入之后F8单步一下，寄存器ESP中存放的值被改变（开始第一条语句为<code>pushad</code>）</p><h3 id="用OD载入"><a href="#用OD载入" class="headerlink" title="用OD载入"></a>用OD载入</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220204749365.png" alt="在这里插入图片描述"></p><h3 id="先F8单步运行一步"><a href="#先F8单步运行一步" class="headerlink" title="先F8单步运行一步"></a>先F8单步运行一步</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220204813500.png" alt="在这里插入图片描述"><br>发现ESP寄存器被改变，可以使用ESP定律<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220205147946.png" alt="在这里插入图片描述"></p><h3 id="设置硬件断点"><a href="#设置硬件断点" class="headerlink" title="设置硬件断点"></a>设置硬件断点</h3><p>右键数据窗口跟随，||     <em>或者直接点HW break[ESP]，此插件会自动帮忙下好硬件断点</em><br>数据窗口设置<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220205831464.png" alt="在这里插入图片描述"><br>从最开始的数据开始选，（别选太少就行）然后右键→断点→硬件访问→这里的三个随便选一个都可以，我一般选word<br>此时菜单栏→调试→硬件断点  已经有了我们下的断点<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220210102458.png" alt="在这里插入图片描述"></p><h3 id="触发断点"><a href="#触发断点" class="headerlink" title="触发断点"></a>触发断点</h3><p>然后F9运行程序，来到这里，此时可以删除硬件断点了<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220210123564.png" alt="在这里插入图片描述"><br>然后F8单步往下<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220210918594.png" alt="在这里插入图片描述"><br>如果遇到向上图这样的，向上的代码，则在下一行代码（上图中的为地址0x004052E8）右键→断点→运行到选定位置（<em>快捷键F4</em>）<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220211100121.png" alt="在这里插入图片描述"><br>删除图中的灰色代码（db 00）可以选择右键→分析→从模块中删除分析<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019122021130275.png" alt="在这里插入图片描述"><br>分析完的模样<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220211350253.png" alt="在这里插入图片描述"><br>然后继续F8，此时出现了一个jmp大跳转（说明离OEP很近了）我们继续F8向下。<br>此时我们来到了OEP<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220211518419.png" alt="在这里插入图片描述"></p><h2 id="单步跟踪"><a href="#单步跟踪" class="headerlink" title="单步跟踪"></a>单步跟踪</h2><ol><li>打开程序按F8单步向下, 尽量实现向下的jmp跳转</li><li>会经常遇到大的循环, 这时要多用 F4 来跳过循环</li><li>如果函数载入时不远处就是一个call(近call), 那么我们尽量不要直接跳过, 而是进入这个call</li><li>一般跳转幅度大的jmp指令, 都极有可能是跳转到了原程序入口点(OEP)</li></ol><p>如果执行到某一个call程序运行起来了，在call下断点，重新载入F7步入call继续单步</p><h2 id="内存镜像法"><a href="#内存镜像法" class="headerlink" title="内存镜像法"></a>内存镜像法</h2><p>大致步骤</p><ol><li>选择菜单的选项-&gt;调试选项-&gt;异常，勾选所有的忽略异常</li><li>按下ALT+M, 打开内存镜像, 找到程序的第一个.rsrc, 按F2下断点, 然后按SHIFT+F9运行到断点</li><li>再按ALT+M, 打开内存镜像, 找到程序的第一个.rsrc上面的.text(在示例中是00401000处), 按F2下断点. 然后按SHIFT+F9（或者是在没异常情况下按F9）<h3 id="OD设置"><a href="#OD设置" class="headerlink" title="OD设置"></a>OD设置</h3></li><li>OD菜单栏→选项→调试设置<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221150135936.png" alt="在这里插入图片描述"></li><li>打开【异常】标签，将所有的框都勾选上，也就是<strong>忽略所有异常</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221150226872.png" alt="在这里插入图片描述"><h3 id="内存镜像下-rsrc断点"><a href="#内存镜像下-rsrc断点" class="headerlink" title="内存镜像下.rsrc断点"></a>内存镜像下.rsrc断点</h3></li><li>打开内存镜像窗口（快捷键Alt+M）或点击下图按钮<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221153439406.png" alt="在这里插入图片描述"></li><li>找到当前被调试程序的rsrc段<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221153508666.png" alt="在这里插入图片描述"></li><li>F2下断点<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221153533255.png" alt="在这里插入图片描述"></li><li>F9运行<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019122115360871.png" alt="在这里插入图片描述"><h3 id="内存镜像下-text断点"><a href="#内存镜像下-text断点" class="headerlink" title="内存镜像下.text断点"></a>内存镜像下.text断点</h3></li><li>下断点<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221153630554.png" alt="在这里插入图片描述"></li><li>运行<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019122115391254.png" alt="**加粗样式**"><h3 id="单步跟踪-1"><a href="#单步跟踪-1" class="headerlink" title="单步跟踪"></a>单步跟踪</h3>单步到这里的时候有两个向上的jmp跳转，选择jmp的下一行代码，然后F4运行到选定位置<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221154205875.png" alt="在这里插入图片描述"><br>继续单步<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221154309437.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221154324819.png"><br>来到OEP<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221154349410.png" alt="在这里插入图片描述"></li></ol><h2 id="最后一次异常"><a href="#最后一次异常" class="headerlink" title="最后一次异常"></a>最后一次异常</h2><ol><li>点击选项-&gt;调试选项—&gt;异常, 把里面的√全部去掉! 按下CTRL+F2重载下程序</li><li>按SHIFT+F9, 直到程序运行, 记下从开始按SHIFT+F9到程序运行的次数m</li><li>CTRL+F2重载程序, 按SHIFT+F9(这次按的次数为程序运行的次数m-1次</li><li>在OD的右下角我们看见有一个”SE 句柄”, 这时我们按CTRL+G, 输入SE 句柄前的地址</li><li>按F2下断点，然后按SHIFT+F9来到断点处, F8单步跟踪<h3 id="OD设置-1"><a href="#OD设置-1" class="headerlink" title="OD设置"></a>OD设置</h3></li><li>OD菜单栏→选项→调试设置<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221150135936.png" alt="在这里插入图片描述"></li><li>不忽略所有异常，取消全部的勾<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221154854169.png" alt="在这里插入图片描述"><br>重载程序<h3 id="记下从开始按SHIFT-F9到程序运行的次数m"><a href="#记下从开始按SHIFT-F9到程序运行的次数m" class="headerlink" title="记下从开始按SHIFT+F9到程序运行的次数m"></a>记下从开始按SHIFT+F9到程序运行的次数m</h3>第一次<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221155210695.png" alt="在这里插入图片描述"><br>第二次打开，摁了两次，则m=2<h3 id="重载，摁m-1次shift-F9"><a href="#重载，摁m-1次shift-F9" class="headerlink" title="重载，摁m-1次shift+F9"></a>重载，摁m-1次shift+F9</h3><h3 id="下断点"><a href="#下断点" class="headerlink" title="下断点"></a>下断点</h3><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221155417861.png" alt="在这里插入图片描述"></li><li>在【SE处理程序】或【SE句柄】右键→反汇编窗口跟随<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019122115553368.png" alt="在这里插入图片描述"></li><li>F2下断点</li><li>shift+F9运行<h3 id="单步跟踪-2"><a href="#单步跟踪-2" class="headerlink" title="单步跟踪"></a>单步跟踪</h3>单步跟踪来到OEP<h2 id="SFX"><a href="#SFX" class="headerlink" title="SFX"></a>SFX</h2></li><li>设置OD, 忽略所有异常, 也就是说异常选项卡里面都打上勾</li><li>切换到SFX选项卡, 选择”字节模式跟踪实际入口(速度非常慢)”, 确定</li><li>重载程序(如果跳出是否”压缩代码?”选择”否”, OD直接到达OEP)<h3 id="OD设置-2"><a href="#OD设置-2" class="headerlink" title="OD设置"></a>OD设置</h3><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221150226872.png" alt="在这里插入图片描述"><h3 id="切换至SFX选项卡"><a href="#切换至SFX选项卡" class="headerlink" title="切换至SFX选项卡"></a>切换至SFX选项卡</h3>选择 字节方式跟踪真正入口出(速度非常慢)<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221160000603.png" alt="在这里插入图片描述"><br>点击【确定】<h3 id="重载程序"><a href="#重载程序" class="headerlink" title="重载程序"></a>重载程序</h3>重载后会自动跟踪<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221160237487.png" alt="在这里插入图片描述"><br>只需等待即可<h3 id="来到OEP"><a href="#来到OEP" class="headerlink" title="来到OEP"></a>来到OEP</h3>等待其跟踪完之后，来到OEP<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221160356139.png" alt="在这里插入图片描述"><h3 id="使用完毕将OD设置还原"><a href="#使用完毕将OD设置还原" class="headerlink" title="使用完毕将OD设置还原"></a>使用完毕将OD设置还原</h3></li></ol><h2 id="出口标志"><a href="#出口标志" class="headerlink" title="出口标志"></a>出口标志</h2><h3 id="寻找压栈命令"><a href="#寻找压栈命令" class="headerlink" title="寻找压栈命令"></a>寻找压栈命令</h3><p>这里最开始的压栈命令为<code>pushad</code>，则对应的出栈命令则为<code>popad</code><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019122116152236.png" alt="在这里插入图片描述"></p><h3 id="查找popad命令"><a href="#查找popad命令" class="headerlink" title="查找popad命令"></a>查找<code>popad</code>命令</h3><ol><li><p>右键→查找→命令（或者使用快捷键ctrl+F）<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221161729258.png" alt="在这里插入图片描述"></p></li><li><p>输入<code>popad</code>，并取消【整个块】前面的框勾选<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221161902733.png" alt="在这里插入图片描述"></p></li><li><p>点击【查找】</p></li><li><p>先在<code>popad</code>那条命令，F4，执行到选定位置。<br>如果程序运行，则寻找下一个popad，（快捷键ctrl+l）直到F4后程序不运行，则找到对应pushad的那个popad</p></li></ol><p>第一次<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221162717844.png" alt="在这里插入图片描述"><br>第二次<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221162743256.png"><br>第三次<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221162815349.png" alt="在这里插入图片描述"><br>第四次<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221162849443.png" alt="在这里插入图片描述"><br>疑似，找到OEP，F4运行到此处的<code>popad</code>，发现程序没有运行<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221162933149.png" alt="在这里插入图片描述"><br>然后F8单步跟踪找到OEP<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221163013890.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221163034411.png" alt="在这里插入图片描述"></p><h2 id="模拟跟踪"><a href="#模拟跟踪" class="headerlink" title="模拟跟踪"></a>模拟跟踪</h2><h3 id="使用内存镜像法"><a href="#使用内存镜像法" class="headerlink" title="使用内存镜像法"></a>使用内存镜像法</h3><h3 id="在内存镜像中寻找-nPack段"><a href="#在内存镜像中寻找-nPack段" class="headerlink" title="在内存镜像中寻找.nPack段"></a>在内存镜像中寻找.nPack段</h3><p>在命令框中输入<code>tc eip &lt; xxx</code>其中xxx为.nPack段的地址<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221161148945.png" alt="在这里插入图片描述"><br>然后OD会自动跟踪，等结果就好</p><h1 id="脱壳实战—脱壳及修复IAT"><a href="#脱壳实战—脱壳及修复IAT" class="headerlink" title="脱壳实战—脱壳及修复IAT"></a>脱壳实战—脱壳及修复IAT</h1><p>题目：<br>链接: <a href="https://pan.baidu.com/s/1wQIwaCu99mYHX8gyqMfMMQ">https://pan.baidu.com/s/1wQIwaCu99mYHX8gyqMfMMQ</a> 提取码: qwcm</p><p>脱壳最好在windows XP环境中</p><h2 id="使用工具："><a href="#使用工具：" class="headerlink" title="使用工具："></a>使用工具：</h2><ol><li>OD</li><li>lordPE</li><li>ImportREC</li></ol><h2 id="第一题：IT修复"><a href="#第一题：IT修复" class="headerlink" title="第一题：IT修复"></a>第一题：IT修复</h2><h3 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220204403882.png" alt="在这里插入图片描述"><br>UPX的壳，无难度</p><h3 id="寻找OEP"><a href="#寻找OEP" class="headerlink" title="寻找OEP"></a>寻找OEP</h3><p>用OD载入<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220204749365.png" alt="在这里插入图片描述"><br>先F8单步运行一步<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220204813500.png" alt="在这里插入图片描述"><br>发现ESP寄存器被改变，可以使用ESP定律<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220205147946.png" alt="在这里插入图片描述"><br>右键数据窗口跟随，||     <em>或者直接点HW break[ESP]，此插件会自动帮忙下好硬件断点</em><br>数据窗口设置<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220205831464.png" alt="在这里插入图片描述"><br>从最开始的数据开始选，（别选太少就行）然后右键→断点→硬件访问→这里的三个随便选一个都可以，我一般选word<br>此时菜单栏→调试→硬件断点  已经有了我们下的断点<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220210102458.png" alt="在这里插入图片描述"><br>然后F9运行程序，来到这里，此时可以删除硬件断点了<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220210123564.png" alt="在这里插入图片描述"><br>然后F8单步往下<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220210918594.png" alt="在这里插入图片描述"><br>如果遇到向上图这样的，向上的代码，则在下一行代码（上图中的为地址0x004052E8）右键→断点→运行到选定位置（<em>快捷键F4</em>）<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220211100121.png" alt="在这里插入图片描述"><br>删除图中的灰色代码（db 00）可以选择右键→分析→从模块中删除分析<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019122021130275.png" alt="在这里插入图片描述"><br>分析完的模样<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220211350253.png" alt="在这里插入图片描述"><br>然后继续F8，此时出现了一个jmp大跳转（说明离OEP很近了）我们继续F8向下。<br>此时我们来到了OEP<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220211518419.png" alt="在这里插入图片描述"><br>脱壳的话，可以右键→用OllyDump脱壳调试进程，点脱壳就好<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220211640877.png" alt="在这里插入图片描述"><br>而此时我们练习手动修复IAT</p><h3 id="使用lordPE进行dump"><a href="#使用lordPE进行dump" class="headerlink" title="使用lordPE进行dump"></a>使用lordPE进行dump</h3><p>不要关闭OD，打开lordPE<br>然后将进程的浮块滑到最底部（lordPE的进程，最新的进程在最底部）<br>然后点击要附加的程序<br>右键→修正镜像大小<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220212117610.png" alt="在这里插入图片描述"><br>然后继续右键→完整转存</p><h3 id="使用Import-REC进行IAT修复"><a href="#使用Import-REC进行IAT修复" class="headerlink" title="使用Import REC进行IAT修复"></a>使用Import REC进行IAT修复</h3><p>OD还是不能关<br>先打开ImportREC附加没有脱壳的已经到达OEP的进程（新的进程在最上面）<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220212240354.png" alt="在这里插入图片描述"><br>我们要记住OD脱壳插件中显示的OEP地址<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220212434829.png" alt="在这里插入图片描述"><br>或者记住OEP前面的地址也行<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220212522445.png" alt="在这里插入图片描述"></p><h4 id="importREC有几个参数"><a href="#importREC有几个参数" class="headerlink" title="importREC有几个参数"></a>importREC有几个参数</h4><ol><li>OEP栏：这里填写OEP的相对偏移地址就行，上面401000-400000=1000（也就是OD脱壳插件显示的那个OEP）</li><li>RVA：虚拟内存地址，这里填IAT的起始位置</li><li>大小：填写导入表大小，需要用IAT的末地址减去首地址。（大小可以写大，但绝不能写小）<br>相对地址则为实际地址减去基址（基址在OD中e窗口中查看）</li></ol><p>如果自动搜索IAT的话，用如下步骤<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220212957515.png" alt="在这里插入图片描述"><br>获取导入表之后，<strong>点按钮【显示无效的】，如果有导入表函数，右键删除即可</strong><br>无效函数删除之后，再点【修正转储】<br>点击后会弹出一个窗口选择一个PE文件，我们选择<strong>之前lordPEdump出来的文件</strong><br>然后脱壳完成。</p><h3 id="手动查找IAT并修复"><a href="#手动查找IAT并修复" class="headerlink" title="手动查找IAT并修复"></a>手动查找IAT并修复</h3><ol><li>在OD中 右键→查找→所有模块间的调用<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220213538708.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220213604261.png" alt="在这里插入图片描述"><br>然后双击一个<strong>程序本身的函数</strong>不要选<strong>系统函数</strong><br>来到函数调用处<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220213726603.png" alt="在这里插入图片描述"><br>右键→跟随，进入函数（快捷键：回车）<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220213758528.png" alt="在这里插入图片描述"><br>来到这里<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220213913877.png" alt="在这里插入图片描述"><br>然后再右键→数据窗口中跟随→内存地址<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220214009735.png" alt="在这里插入图片描述"><br>为了便于查看， 可以更改一下数据窗口的显示方式<br>右键→长型→地址<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220214101688.png" alt="在这里插入图片描述"><br>或者在下面的窗口里输入<code>d xxx</code>，其中xxx为jmp后的地址<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220214319919.png" alt="在这里插入图片描述"></li></ol><p><strong>IAT段是连续的，向上找到开头，向下找到结尾</strong></p><p>可以知道<br>起始：0x00402000<br>结束：0x0040200C<br>RVA：0x00402000 - 0x00400000 = 0x00002000（相对偏移地址）<br>大小：0x0040200C - 0x00402000 = 0xC</p><p>填入<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019122021515181.png" alt="在这里插入图片描述"><br>然后获取导入表，删除无效函数（此程序没有无效函数），【修正转储】，选择之前用lordPE软件dump出的文件，确定。</p><p>可以正常打开，成功。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019122021532947.png" alt="在这里插入图片描述"></p><h4 id="另一种寻找函数的方法："><a href="#另一种寻找函数的方法：" class="headerlink" title="另一种寻找函数的方法："></a>另一种寻找函数的方法：</h4><p>用ImportREC进行IAT自动搜索，获取导入表，在导入表中找到一个函数，记录此函数的相对偏移<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220215544781.png" alt="在这里插入图片描述"><br>然后0x00002004 + 0x0040000 = 0x00402004得到此函数的地址，然后在od底部的命令框中输入<code>d xxx</code>，其中xxx为jmp后的地址，来达到找到IAT段的目的<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191220215658414.png" alt="在这里插入图片描述"></p><h2 id="第二题：脱壳练习2"><a href="#第二题：脱壳练习2" class="headerlink" title="第二题：脱壳练习2"></a>第二题：脱壳练习2</h2><p>步骤同第一题</p><h1 id="各语言OEP截图"><a href="#各语言OEP截图" class="headerlink" title="各语言OEP截图"></a>各语言OEP截图</h1><p>﻿1. 易语言独立编译<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221124347432.png" alt="在这里插入图片描述"><br>2. 易语言非独立编译<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221124359411.png" alt="在这里插入图片描述"><br>3. VC++6<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221123717559.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221124445918.png" alt="在这里插入图片描述"><br>4. VC++7<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221124440479.png" alt="在这里插入图片描述"><br>5. VB5<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019122112382578.png" alt="在这里插入图片描述"><br>6. VB6<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221123837530.png" alt="在这里插入图片描述"><br>7. Delphi<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221124141795.png" alt="在这里插入图片描述"><br>8. BC++<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221123905888.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221124208801.png" alt="在这里插入图片描述"><br>9. VS2008Debug<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221123515732.png" alt="在这里插入图片描述"><br>10. VS2008Release<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221123608732.png" alt="在这里插入图片描述"><br>11. VS2012-VS2015 Debug<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221124035894.png" alt="在这里插入图片描述"><br>12. VS2012-VS2015 Release<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221124056750.png" alt="在这里插入图片描述"><br>13. 汇编语言<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191221124527513.png" alt="在这里插入图片描述"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;壳的概念学习&quot;&gt;&lt;a href=&quot;#壳的概念学习&quot; class=&quot;headerlink&quot; title=&quot;壳的概念学习&quot;&gt;&lt;/a&gt;壳的概念学习&lt;/h1&gt;&lt;h2 id=&quot;壳的概念&quot;&gt;&lt;a href=&quot;#壳的概念&quot; class=&quot;headerlink&quot; title=&quot;壳
      
    
    </summary>
    
    
      <category term="ctf-re" scheme="https://Forgo7ten.github.io/categories/ctf-re/"/>
    
      <category term="re学习" scheme="https://Forgo7ten.github.io/categories/ctf-re/re%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ctf-re" scheme="https://Forgo7ten.github.io/tags/ctf-re/"/>
    
      <category term="脱壳技术" scheme="https://Forgo7ten.github.io/tags/%E8%84%B1%E5%A3%B3%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
